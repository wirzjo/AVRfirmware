
AEOLUS_Sensorboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000ad0  00000b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  0080010a  0080010a  00000b6e  2**0
                  ALLOC
  3 .stab         00001ba8  00000000  00000000  00000b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00002ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001246  00000000  00000000  00002e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000904  00000000  00000000  00004086  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da3  00000000  00000000  0000498a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  00005730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046c  00000000  00000000  00005a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a9  00000000  00000000  00005ee8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	1a c3       	rjmp	.+1588   	; 0x65a <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e0 ed       	ldi	r30, 0xD0	; 208
  48:	fa e0       	ldi	r31, 0x0A	; 10
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	aa 30       	cpi	r26, 0x0A	; 10
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	aa e0       	ldi	r26, 0x0A	; 10
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	af 36       	cpi	r26, 0x6F	; 111
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	42 d2       	rcall	.+1156   	; 0x4ec <main>
  68:	31 c5       	rjmp	.+2658   	; 0xacc <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <I2C_init>:
 * @return false, if Bitrate is too high 
 */ 
bool I2C_init(uint32_t bitrate) {
	
	//Init the I2C bitrate and prescaler   
	TWSR = 0;                       //no prescaler => presaclaer = 1
  6c:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = ((F_CPU/BITRATE)-16)/2;  //should be >10 for stable operation 
  70:	e8 eb       	ldi	r30, 0xB8	; 184
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	80 e2       	ldi	r24, 0x20	; 32
  76:	80 83       	st	Z, r24
	
	//Check if TWBR is high enough (>10)
	if(TWBR>10) {
  78:	90 81       	ld	r25, Z
 * Init the use of I2C 
 *
 * @param bitrate [Hz]
 * @return false, if Bitrate is too high 
 */ 
bool I2C_init(uint32_t bitrate) {
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	9b 30       	cpi	r25, 0x0B	; 11
  7e:	08 f4       	brcc	.+2      	; 0x82 <I2C_init+0x16>
  80:	80 e0       	ldi	r24, 0x00	; 0
		return true; 
	}		
	
	//Some error occured => return false 	
	return false;
}
  82:	08 95       	ret

00000084 <I2C_start>:
 * Start the I2C Master 
 *
 * @param address: 7bit slave address 
 * @param access: read or write (1 = read, 0 = write) 
 */
bool I2C_start(uint8_t address, uint8_t access) {
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
	
	timeout = 0; //Reset the number of retries 
  88:	10 92 0a 01 	sts	0x010A, r1
		twst = TW_STATUS & 0xF8;
		if ( (twst != TW_START) && (twst != TW_REP_START)) return false;

		//send device address
		//address = address | access;
		TWDR = ((address<<1) | access);
  8c:	88 0f       	add	r24, r24
  8e:	68 2b       	or	r22, r24
	//serial_send_string(" I2C Start...\n"); 

	while(true) {

		// send START condition
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  90:	ec eb       	ldi	r30, 0xBC	; 188
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	24 ea       	ldi	r18, 0xA4	; 164
		}
		
		//serial_send_string("   transmission completed"); 

		// check value of TWI Status Register. Mask prescaler bits.
		twst = TW_STATUS & 0xF8;
  96:	a9 eb       	ldi	r26, 0xB9	; 185
  98:	b0 e0       	ldi	r27, 0x00	; 0
		if ( (twst != TW_START) && (twst != TW_REP_START)) return false;

		//send device address
		//address = address | access;
		TWDR = ((address<<1) | access);
  9a:	cb eb       	ldi	r28, 0xBB	; 187
  9c:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
  9e:	34 e8       	ldi	r19, 0x84	; 132
		if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) {
			//We received NACK => the device is busy => we continue polling it 
			//serial_send_string("   LIDAR busy!");
			
			//device busy, send stop condition to terminate write operation
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  a0:	84 e9       	ldi	r24, 0x94	; 148
	//serial_send_string(" I2C Start...\n"); 

	while(true) {

		// send START condition
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  a2:	20 83       	st	Z, r18

		// wait until transmission completed
		while(!(TWCR & (1<<TWINT))) {
  a4:	07 c0       	rjmp	.+14     	; 0xb4 <I2C_start+0x30>
			timeout++; 
  a6:	90 91 0a 01 	lds	r25, 0x010A
  aa:	9f 5f       	subi	r25, 0xFF	; 255
  ac:	90 93 0a 01 	sts	0x010A, r25
			
			if(timeout>TIMEOUT) {
  b0:	95 36       	cpi	r25, 0x65	; 101
  b2:	48 f5       	brcc	.+82     	; 0x106 <I2C_start+0x82>

		// send START condition
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);

		// wait until transmission completed
		while(!(TWCR & (1<<TWINT))) {
  b4:	90 81       	ld	r25, Z
  b6:	99 23       	and	r25, r25
  b8:	b4 f7       	brge	.-20     	; 0xa6 <I2C_start+0x22>
		}
		
		//serial_send_string("   transmission completed"); 

		// check value of TWI Status Register. Mask prescaler bits.
		twst = TW_STATUS & 0xF8;
  ba:	9c 91       	ld	r25, X
  bc:	98 7f       	andi	r25, 0xF8	; 248
		if ( (twst != TW_START) && (twst != TW_REP_START)) return false;
  be:	98 30       	cpi	r25, 0x08	; 8
  c0:	11 f0       	breq	.+4      	; 0xc6 <I2C_start+0x42>
  c2:	90 31       	cpi	r25, 0x10	; 16
  c4:	11 f5       	brne	.+68     	; 0x10a <I2C_start+0x86>

		//send device address
		//address = address | access;
		TWDR = ((address<<1) | access);
  c6:	68 83       	st	Y, r22
		TWCR = (1<<TWINT) | (1<<TWEN);
  c8:	30 83       	st	Z, r19

		// wail until transmission completed and ACK/NACK has been received
		while(!(TWCR & (1<<TWINT))){
  ca:	07 c0       	rjmp	.+14     	; 0xda <I2C_start+0x56>
			timeout++;
  cc:	90 91 0a 01 	lds	r25, 0x010A
  d0:	9f 5f       	subi	r25, 0xFF	; 255
  d2:	90 93 0a 01 	sts	0x010A, r25
			
			if(timeout>TIMEOUT) {
  d6:	95 36       	cpi	r25, 0x65	; 101
  d8:	d0 f4       	brcc	.+52     	; 0x10e <I2C_start+0x8a>
		//address = address | access;
		TWDR = ((address<<1) | access);
		TWCR = (1<<TWINT) | (1<<TWEN);

		// wail until transmission completed and ACK/NACK has been received
		while(!(TWCR & (1<<TWINT))){
  da:	90 81       	ld	r25, Z
  dc:	99 23       	and	r25, r25
  de:	b4 f7       	brge	.-20     	; 0xcc <I2C_start+0x48>
		}
		
		//serial_send_string("   ACK/NACK received"); 

		// check value of TWI Status Register. Mask prescaler bits.
		twst = TW_STATUS & 0xF8;	
  e0:	9c 91       	ld	r25, X
  e2:	98 7f       	andi	r25, 0xF8	; 248
	
		if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) {
  e4:	90 32       	cpi	r25, 0x20	; 32
  e6:	11 f0       	breq	.+4      	; 0xec <I2C_start+0x68>
  e8:	98 35       	cpi	r25, 0x58	; 88
  ea:	99 f4       	brne	.+38     	; 0x112 <I2C_start+0x8e>
			//We received NACK => the device is busy => we continue polling it 
			//serial_send_string("   LIDAR busy!");
			
			//device busy, send stop condition to terminate write operation
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  ec:	80 83       	st	Z, r24
		
			// wait until stop condition is executed and bus released
			while(TWCR & (1<<TWSTO)) {
  ee:	07 c0       	rjmp	.+14     	; 0xfe <I2C_start+0x7a>
				timeout++;
  f0:	90 91 0a 01 	lds	r25, 0x010A
  f4:	9f 5f       	subi	r25, 0xFF	; 255
  f6:	90 93 0a 01 	sts	0x010A, r25
				
				if(timeout>TIMEOUT) {
  fa:	95 36       	cpi	r25, 0x65	; 101
  fc:	60 f4       	brcc	.+24     	; 0x116 <I2C_start+0x92>
			
			//device busy, send stop condition to terminate write operation
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
		
			// wait until stop condition is executed and bus released
			while(TWCR & (1<<TWSTO)) {
  fe:	90 81       	ld	r25, Z
 100:	94 fd       	sbrc	r25, 4
 102:	f6 cf       	rjmp	.-20     	; 0xf0 <I2C_start+0x6c>
 104:	ce cf       	rjmp	.-100    	; 0xa2 <I2C_start+0x1e>
		// wait until transmission completed
		while(!(TWCR & (1<<TWINT))) {
			timeout++; 
			
			if(timeout>TIMEOUT) {
				return false; 
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	07 c0       	rjmp	.+14     	; 0x118 <I2C_start+0x94>
		
		//serial_send_string("   transmission completed"); 

		// check value of TWI Status Register. Mask prescaler bits.
		twst = TW_STATUS & 0xF8;
		if ( (twst != TW_START) && (twst != TW_REP_START)) return false;
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	05 c0       	rjmp	.+10     	; 0x118 <I2C_start+0x94>
		// wail until transmission completed and ACK/NACK has been received
		while(!(TWCR & (1<<TWINT))){
			timeout++;
			
			if(timeout>TIMEOUT) {
				return false;
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	03 c0       	rjmp	.+6      	; 0x118 <I2C_start+0x94>

		break;
	}

	//serial_send_string("...end!\n"); 
	return true;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	01 c0       	rjmp	.+2      	; 0x118 <I2C_start+0x94>
			// wait until stop condition is executed and bus released
			while(TWCR & (1<<TWSTO)) {
				timeout++;
				
				if(timeout>TIMEOUT) {
					return false;
 116:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}

	//serial_send_string("...end!\n"); 
	return true;
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <I2C_stop>:
 * Stop the I2C Master 
 *
 */
void I2C_stop(void) {
	
	timeout = 0; //Reset the number of retries 
 11e:	10 92 0a 01 	sts	0x010A, r1
	
    //Send Stop condition 
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 122:	84 e9       	ldi	r24, 0x94	; 148
 124:	80 93 bc 00 	sts	0x00BC, r24
    
    // wait until stop condition is executed and bus released
    while(TWCR & (1<<TWSTO)) {
 128:	ec eb       	ldi	r30, 0xBC	; 188
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	07 c0       	rjmp	.+14     	; 0x13c <I2C_stop+0x1e>
		timeout++;
 12e:	80 91 0a 01 	lds	r24, 0x010A
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	80 93 0a 01 	sts	0x010A, r24
		
		if(timeout>TIMEOUT) {
 138:	85 36       	cpi	r24, 0x65	; 101
 13a:	18 f4       	brcc	.+6      	; 0x142 <I2C_stop+0x24>
	
    //Send Stop condition 
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    
    // wait until stop condition is executed and bus released
    while(TWCR & (1<<TWSTO)) {
 13c:	80 81       	ld	r24, Z
 13e:	84 fd       	sbrc	r24, 4
 140:	f6 cf       	rjmp	.-20     	; 0x12e <I2C_stop+0x10>
 142:	08 95       	ret

00000144 <I2C_write_byte>:
 *
 * @param bytes 
 */
bool I2C_write_byte(uint8_t byte) {
	
	timeout = 0; //Reset the number of retries 
 144:	10 92 0a 01 	sts	0x010A, r1
	
	uint8_t   twst;
	
	//Send data to the previously addressed device
	TWDR = byte;
 148:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
 14c:	84 e8       	ldi	r24, 0x84	; 132
 14e:	80 93 bc 00 	sts	0x00BC, r24
	
	//serial_send_string("  write byte...");
	
	//Wait until transmission completed
	while (!(TWCR & (1<<TWINT))) {
 152:	ec eb       	ldi	r30, 0xBC	; 188
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	07 c0       	rjmp	.+14     	; 0x166 <I2C_write_byte+0x22>
		timeout++;
 158:	80 91 0a 01 	lds	r24, 0x010A
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 0a 01 	sts	0x010A, r24
		
		if(timeout>TIMEOUT) {
 162:	85 36       	cpi	r24, 0x65	; 101
 164:	58 f4       	brcc	.+22     	; 0x17c <I2C_write_byte+0x38>
	TWCR = (1<<TWINT)|(1<<TWEN);
	
	//serial_send_string("  write byte...");
	
	//Wait until transmission completed
	while (!(TWCR & (1<<TWINT))) {
 166:	80 81       	ld	r24, Z
 168:	88 23       	and	r24, r24
 16a:	b4 f7       	brge	.-20     	; 0x158 <I2C_write_byte+0x14>
	}
	
	//serial_send_string("  byte written!"); 

	//Check value of TWI Status Register. Mask prescalor bits
	twst = TWSR & 0xF8;
 16c:	90 91 b9 00 	lds	r25, 0x00B9
 170:	98 7f       	andi	r25, 0xF8	; 248
/**
 * Write a Byte to the slave 
 *
 * @param bytes 
 */
bool I2C_write_byte(uint8_t byte) {
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	98 32       	cpi	r25, 0x28	; 40
 176:	19 f4       	brne	.+6      	; 0x17e <I2C_write_byte+0x3a>
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	08 95       	ret
	//Wait until transmission completed
	while (!(TWCR & (1<<TWINT))) {
		timeout++;
		
		if(timeout>TIMEOUT) {
			return false;
 17c:	80 e0       	ldi	r24, 0x00	; 0
	if (twst != TWI_MTX_DATA_ACK) {
		return true;
	}	
		
	return false;
}
 17e:	08 95       	ret

00000180 <I2C_read_byte>:
 *
 * @return byte read
 */
uint8_t I2C_read_byte(void) {
	
	timeout = 0; //Reset the number of retries 
 180:	10 92 0a 01 	sts	0x010A, r1
	
	//serial_send_string("  read byte..."); 
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 184:	84 ec       	ldi	r24, 0xC4	; 196
 186:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT))) {
 18a:	ec eb       	ldi	r30, 0xBC	; 188
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	07 c0       	rjmp	.+14     	; 0x19e <I2C_read_byte+0x1e>
		timeout++;
 190:	80 91 0a 01 	lds	r24, 0x010A
 194:	8f 5f       	subi	r24, 0xFF	; 255
 196:	80 93 0a 01 	sts	0x010A, r24
		
		if(timeout>TIMEOUT) {
 19a:	85 36       	cpi	r24, 0x65	; 101
 19c:	30 f4       	brcc	.+12     	; 0x1aa <I2C_read_byte+0x2a>
	
	timeout = 0; //Reset the number of retries 
	
	//serial_send_string("  read byte..."); 
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	while (!(TWCR & (1<<TWINT))) {
 19e:	80 81       	ld	r24, Z
 1a0:	88 23       	and	r24, r24
 1a2:	b4 f7       	brge	.-20     	; 0x190 <I2C_read_byte+0x10>
		}
	}

	//serial_send_string("  byte read"); 

	return TWDR;
 1a4:	80 91 bb 00 	lds	r24, 0x00BB
 1a8:	08 95       	ret
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	while (!(TWCR & (1<<TWINT))) {
		timeout++;
		
		if(timeout>TIMEOUT) {
			return false;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
	}

	//serial_send_string("  byte read"); 

	return TWDR;
}
 1ac:	08 95       	ret

000001ae <I2C_read_last_byte>:
 * 
 * @return last byte read
 */
uint8_t I2C_read_last_byte(void) {
	
	timeout = 0; //Reset the number of retries 
 1ae:	10 92 0a 01 	sts	0x010A, r1
	
	TWCR = (1<<TWINT)|(1<<TWEN);
 1b2:	84 e8       	ldi	r24, 0x84	; 132
 1b4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))) {
 1b8:	ec eb       	ldi	r30, 0xBC	; 188
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	07 c0       	rjmp	.+14     	; 0x1cc <I2C_read_last_byte+0x1e>
		timeout++;
 1be:	80 91 0a 01 	lds	r24, 0x010A
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 0a 01 	sts	0x010A, r24
		
		if(timeout>TIMEOUT) {
 1c8:	85 36       	cpi	r24, 0x65	; 101
 1ca:	30 f4       	brcc	.+12     	; 0x1d8 <I2C_read_last_byte+0x2a>
uint8_t I2C_read_last_byte(void) {
	
	timeout = 0; //Reset the number of retries 
	
	TWCR = (1<<TWINT)|(1<<TWEN);
	while(!(TWCR & (1<<TWINT))) {
 1cc:	80 81       	ld	r24, Z
 1ce:	88 23       	and	r24, r24
 1d0:	b4 f7       	brge	.-20     	; 0x1be <I2C_read_last_byte+0x10>
		if(timeout>TIMEOUT) {
			return false;
		}
	}
	
	return TWDR;
 1d2:	80 91 bb 00 	lds	r24, 0x00BB
 1d6:	08 95       	ret
	TWCR = (1<<TWINT)|(1<<TWEN);
	while(!(TWCR & (1<<TWINT))) {
		timeout++;
		
		if(timeout>TIMEOUT) {
			return false;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return TWDR;
}
 1da:	08 95       	ret

000001dc <lidar_get_distance>:
 * @return The latest known distance 
 */
uint16_t lidar_get_distance(void) {
	
	return state.last_distance; 
}
 1dc:	80 91 0b 01 	lds	r24, 0x010B
 1e0:	90 91 0c 01 	lds	r25, 0x010C
 1e4:	08 95       	ret

000001e6 <write_register>:
 * Write a value to a register 
 *
 * @param reg: Name of the register 
 * @param data: Data to be written to the register  
 */ 
bool write_register(uint8_t reg, uint8_t data) {
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	d8 2f       	mov	r29, r24
 1ec:	c6 2f       	mov	r28, r22
	
	//serial_send_string("WRITE..."); 
	
	//Start the I2C Master interface. 
	//We want to write a register => access-type is WRITE 
	if(!I2C_start (SLAVE_ADDR, WRITE)) {
 1ee:	82 e6       	ldi	r24, 0x62	; 98
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	48 df       	rcall	.-368    	; 0x84 <I2C_start>
 1f4:	88 23       	and	r24, r24
 1f6:	19 f4       	brne	.+6      	; 0x1fe <write_register+0x18>
		//I2C could not be started => nothing we can do against this, might flag unhappy...
		//Anyway, stop the I2C Master interface
		
		//serial_send_string("can not write"); 
		I2C_stop();
 1f8:	92 df       	rcall	.-220    	; 0x11e <I2C_stop>
		
		return false; 
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <write_register+0x24>
	} else {
		//I2C Master Interface is started => we can transfer the bytes to the slave 
		
		//Send Register address 
		I2C_write_byte(reg); 
 1fe:	8d 2f       	mov	r24, r29
 200:	a1 df       	rcall	.-190    	; 0x144 <I2C_write_byte>
		
		//Send Value the register should contain 
		I2C_write_byte(data);
 202:	8c 2f       	mov	r24, r28
 204:	9f df       	rcall	.-194    	; 0x144 <I2C_write_byte>
		
		//Close the Master-Interface 
		I2C_stop(); 
 206:	8b df       	rcall	.-234    	; 0x11e <I2C_stop>
	
	//serial_send_string("Write OK");
	//_delay_ms(3);  
	
	//Everything is OK => return true
	return true; 
 208:	81 e0       	ldi	r24, 0x01	; 1
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <lidar_init>:
bool lidar_init(void) {
	
	bool status = true;		//Status of the initialization (we assume that everything is OK at the beginning) 
	
	//Start the I2C Interface 
	if(!I2C_init(BITRATE)) {
 210:	60 ea       	ldi	r22, 0xA0	; 160
 212:	76 e8       	ldi	r23, 0x86	; 134
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	29 df       	rcall	.-430    	; 0x6c <I2C_init>
 21a:	88 23       	and	r24, r24
 21c:	21 f0       	breq	.+8      	; 0x226 <lidar_init+0x16>
		return false; 
	}
	
	
	//Reset the lidar to defaults for Distance Measurements 
	status = status && write_register(I_COMMAND_REG, 0x00); 
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	e1 df       	rcall	.-62     	; 0x1e6 <write_register>
	
	//Return the status after all initialization is done
	return status; 
 224:	08 95       	ret
	//Start the I2C Interface 
	if(!I2C_init(BITRATE)) {
		//An error occurred during initialization of the I2C interface 
		//Nothing we can do about this... might flag unhappy... 
		
		return false; 
 226:	80 e0       	ldi	r24, 0x00	; 0
	//Reset the lidar to defaults for Distance Measurements 
	status = status && write_register(I_COMMAND_REG, 0x00); 
	
	//Return the status after all initialization is done
	return status; 
}
 228:	08 95       	ret

0000022a <read_register>:
 *
 * @param reg: Name of the register 
 * @param numofbytes: number of Bytes to be read (1,2) 
 * @param arraytosafe: Array with two bytes, where the result is stored 
 */
bool read_register(uint8_t reg, uint8_t numofbytes, uint8_t arraytosafe[2]) {
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	08 2f       	mov	r16, r24
 234:	16 2f       	mov	r17, r22
 236:	ea 01       	movw	r28, r20
	
	//serial_send_string("READ..."); 
	
	//Start the I2C Master interface
	//We want tor write a register first => access-type is WRITE 
	if(!I2C_start(SLAVE_ADDR, WRITE)) {
 238:	82 e6       	ldi	r24, 0x62	; 98
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	23 df       	rcall	.-442    	; 0x84 <I2C_start>
 23e:	88 23       	and	r24, r24
 240:	19 f4       	brne	.+6      	; 0x248 <read_register+0x1e>
		//I2C could not be started => nothing we can do against this, might flag unhappy...
		//Anyway, stop the I2C Master interface
				
		I2C_stop();
 242:	6d df       	rcall	.-294    	; 0x11e <I2C_stop>
		
		//serial_send_string("I2C Error");
		
		return false; 
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	1f c0       	rjmp	.+62     	; 0x286 <read_register+0x5c>
	} else {
		//I2C Master Interface is started => we can transfer the bytes to the slave
		//serial_send_string("send Bytes"); 
		
		//If two consecutive registers should be read, the address must contain a 1 as bit7
		if(numofbytes == 2) {
 248:	12 30       	cpi	r17, 0x02	; 2
 24a:	09 f4       	brne	.+2      	; 0x24e <read_register+0x24>
			//We want to write two consecutive registers => we must set bit7 of the register address to 1
			reg = 0x80 | reg; 
 24c:	00 68       	ori	r16, 0x80	; 128
		}
		
		//Send the register address to be read
		I2C_write_byte(reg); 
 24e:	80 2f       	mov	r24, r16
 250:	79 df       	rcall	.-270    	; 0x144 <I2C_write_byte>
		
		//Stop the Interface 
		I2C_stop();
 252:	65 df       	rcall	.-310    	; 0x11e <I2C_stop>
		
		//Start the I2C Master interface
		//This time we want tor read a register => access-type is READ
		if(!I2C_start(SLAVE_ADDR, READ)) {
 254:	82 e6       	ldi	r24, 0x62	; 98
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	15 df       	rcall	.-470    	; 0x84 <I2C_start>
 25a:	88 23       	and	r24, r24
 25c:	19 f4       	brne	.+6      	; 0x264 <read_register+0x3a>
			//I2C could not be started => nothing we can do against this, might flag unhappy... 
			//Anyway, stop the I2C Master interface 
			
			I2C_stop(); 
 25e:	5f df       	rcall	.-322    	; 0x11e <I2C_stop>
			
			//serial_send_string("Error: no read");
			
			return false; 
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	11 c0       	rjmp	.+34     	; 0x286 <read_register+0x5c>
			//I2C Master Interface is started => we can read the bytes from the slave 
			
			//serial_send_string(" try to read"); 
			
			//Read one or two bytes from the Slave 
			if(numofbytes == 1) {
 264:	11 30       	cpi	r17, 0x01	; 1
 266:	19 f4       	brne	.+6      	; 0x26e <read_register+0x44>
				//Only one byte is to be read 
				
				arraytosafe[0] = I2C_read_byte(); //The first byte is the last byte
 268:	8b df       	rcall	.-234    	; 0x180 <I2C_read_byte>
 26a:	88 83       	st	Y, r24
 26c:	0a c0       	rjmp	.+20     	; 0x282 <read_register+0x58>
			} else if(numofbytes == 2) {
 26e:	12 30       	cpi	r17, 0x02	; 2
 270:	29 f4       	brne	.+10     	; 0x27c <read_register+0x52>
				//Two bytes are to be read 
				
				arraytosafe[0] = I2C_read_byte();		//Read first byte 
 272:	86 df       	rcall	.-244    	; 0x180 <I2C_read_byte>
 274:	88 83       	st	Y, r24
				//serial_send_string(" read first byte"); 
				arraytosafe[1] = I2C_read_byte();		//Read second byte <=> last byte 
 276:	84 df       	rcall	.-248    	; 0x180 <I2C_read_byte>
 278:	89 83       	std	Y+1, r24	; 0x01
 27a:	03 c0       	rjmp	.+6      	; 0x282 <read_register+0x58>
				//serial_send_string(" read second byte");  
				
				//Stop the Master Interface for Reading 
				//I2C_stop(); 
			} else {
				I2C_stop(); 
 27c:	50 df       	rcall	.-352    	; 0x11e <I2C_stop>
				
				return false; 
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <read_register+0x5c>
			}
			
			//Stop the Master-interface for Writing 
			I2C_stop(); 
 282:	4d df       	rcall	.-358    	; 0x11e <I2C_stop>
	} //END OF I2C_WRITE
	
	//serial_send_string("EOF read"); 
	
	//Everything is OK => return true
	return true; 
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	08 95       	ret

00000290 <lidar_measure>:
/**
 * Read the distance from the LIDAR Sensor 
 *
 * @return the measured distance [cm] (Note: 16bit value!) 
 */ 
uint16_t lidar_measure(void) {
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	00 d0       	rcall	.+0      	; 0x296 <lidar_measure+0x6>
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
	uint8_t result[2]; 
	
	if(!write_register(0x00,0x04)) {
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	64 e0       	ldi	r22, 0x04	; 4
 29e:	a3 df       	rcall	.-186    	; 0x1e6 <write_register>
 2a0:	88 23       	and	r24, r24
 2a2:	c9 f0       	breq	.+50     	; 0x2d6 <lidar_measure+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a4:	8f e5       	ldi	r24, 0x5F	; 95
 2a6:	9a ee       	ldi	r25, 0xEA	; 234
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lidar_measure+0x18>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <lidar_measure+0x1e>
 2ae:	00 00       	nop
	//TODO: Maybe it is possible to do something else in this time...maybe move the Servo...(dangerous, because then the servo could eventually move 
	//during an ongoing Measurement! 
	_delay_ms(30); //Note: This delay is very important! (as soon as it is removed, the software crashes at some point!) 
	
	//Read the Distance from the Register using I2C
	if(!read_register(0x0f,2,result)) {
 2b0:	8f e0       	ldi	r24, 0x0F	; 15
 2b2:	62 e0       	ldi	r22, 0x02	; 2
 2b4:	ae 01       	movw	r20, r28
 2b6:	4f 5f       	subi	r20, 0xFF	; 255
 2b8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ba:	b7 df       	rcall	.-146    	; 0x22a <read_register>
 2bc:	88 23       	and	r24, r24
 2be:	71 f0       	breq	.+28     	; 0x2dc <lidar_measure+0x4c>
		return 0; 
	}

	
	//Since we read a new distance from the Sensor, we can store it as the local state 
	state.last_distance = ((result[0] << 8) | result[1]);
 2c0:	39 81       	ldd	r19, Y+1	; 0x01
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	8a 81       	ldd	r24, Y+2	; 0x02
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	82 2b       	or	r24, r18
 2ca:	93 2b       	or	r25, r19
 2cc:	90 93 0c 01 	sts	0x010C, r25
 2d0:	80 93 0b 01 	sts	0x010B, r24
 
	
	//serial_send_string("LIDAR OK!"); 
	//Return the current distance 
	return state.last_distance;  
 2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <lidar_measure+0x50>
uint16_t lidar_measure(void) {
	uint8_t result[2]; 
	
	if(!write_register(0x00,0x04)) {
		//serial_send_string("error measure"); 
		return 0; 
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <lidar_measure+0x50>
	//Read the Distance from the Register using I2C
	if(!read_register(0x0f,2,result)) {
		//The reading of the registers was NOT successful 
		//Nothing we can do about this... might flag unhappy...
		
		return 0; 
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	90 e0       	ldi	r25, 0x00	; 0
	
	//serial_send_string("LIDAR OK!"); 
	//Return the current distance 
	return state.last_distance;  
	
}
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <measure_init>:
 *
 */
bool measure_init(void) {
	
	//Move the Servo to start-position 
	servo_set(0); 
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	cb 01       	movw	r24, r22
 2f0:	0c d2       	rcall	.+1048   	; 0x70a <servo_set>
	
	//Init the Angle (we start on Starboard) 
	state.angle = 0; 
 2f2:	10 92 01 01 	sts	0x0101, r1
 2f6:	10 92 00 01 	sts	0x0100, r1
	
	//Set the direction (Starboard to Backboard) 
	state.direction = 1; 
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	80 93 02 01 	sts	0x0102, r24
	
	return true; 
}
 300:	08 95       	ret

00000302 <measure_handler>:
	_delay_ms(500); 
	*/

	
	//Check if we already finished one round 
	if(state.angle>=2*RANGE) {
 302:	80 91 00 01 	lds	r24, 0x0100
 306:	90 91 01 01 	lds	r25, 0x0101
 30a:	84 3b       	cpi	r24, 0xB4	; 180
 30c:	91 05       	cpc	r25, r1
 30e:	48 f0       	brcs	.+18     	; 0x322 <measure_handler+0x20>
		//We are at the end => on backbord-side 
		
		state.angle = 2*RANGE; 
 310:	84 eb       	ldi	r24, 0xB4	; 180
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	90 93 01 01 	sts	0x0101, r25
 318:	80 93 00 01 	sts	0x0100, r24
		state.direction = -1; 
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	80 93 02 01 	sts	0x0102, r24
	}
	
	if(state.angle<=0) {
 322:	80 91 00 01 	lds	r24, 0x0100
 326:	90 91 01 01 	lds	r25, 0x0101
 32a:	00 97       	sbiw	r24, 0x00	; 0
 32c:	19 f4       	brne	.+6      	; 0x334 <measure_handler+0x32>
		//We are at the end => on starboard-side
		
		state.angle = 0; 
		state.direction = 1; 
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	80 93 02 01 	sts	0x0102, r24
	}
	
	
	//MOVE THE SERVO TO THE NEW ANGLE 
	servo_set(state.angle * SERVOFACTOR); 
 334:	60 91 00 01 	lds	r22, 0x0100
 338:	70 91 01 01 	lds	r23, 0x0101
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	97 d2       	rcall	.+1326   	; 0x870 <__floatunsisf>
 342:	e3 d1       	rcall	.+966    	; 0x70a <servo_set>
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	90 e7       	ldi	r25, 0x70	; 112
 348:	a2 e0       	ldi	r26, 0x02	; 2
 34a:	81 50       	subi	r24, 0x01	; 1
 34c:	90 40       	sbci	r25, 0x00	; 0
 34e:	a0 40       	sbci	r26, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <measure_handler+0x48>
 352:	00 c0       	rjmp	.+0      	; 0x354 <measure_handler+0x52>
 354:	00 00       	nop
	_delay_ms(100); 
	
	//DO THE MEASUREMENT  
	uint16_t dist = lidar_measure();
 356:	9c df       	rcall	.-200    	; 0x290 <lidar_measure>
	
	//TELL THE VALUE TO THE FILTER-UNIT
	filter(&dist); 
	
	//Increase the Angle 
	state.angle += (state.direction * INTERVAL); 	
 358:	80 91 02 01 	lds	r24, 0x0102
 35c:	99 27       	eor	r25, r25
 35e:	87 fd       	sbrc	r24, 7
 360:	90 95       	com	r25
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	20 91 00 01 	lds	r18, 0x0100
 36a:	30 91 01 01 	lds	r19, 0x0101
 36e:	82 0f       	add	r24, r18
 370:	93 1f       	adc	r25, r19
 372:	90 93 01 01 	sts	0x0101, r25
 376:	80 93 00 01 	sts	0x0100, r24
	
}
 37a:	08 95       	ret

0000037c <filter>:
 * 
 * 
 */
void filter(uint16_t *dist) {
	
 37c:	08 95       	ret

0000037e <pixhawk_init>:
 * @return true, if initialization was successful 
 */
bool pixhawk_init(void) {
	
	//Set the state of the parser
	rx_state = IDLE; 
 37e:	10 92 0d 01 	sts	0x010D, r1
	
	
	//Init the serial communication 
	//serial_init(38400);	//for use with PIXHAWK
	serial_init(19200); 
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	9b e4       	ldi	r25, 0x4B	; 75
 386:	12 d1       	rcall	.+548    	; 0x5ac <serial_init>
	
	return true; 
}
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	08 95       	ret

0000038c <pixhawk_parse>:
 * Parsing new data that is available from the serial interface 
 * Note: This function is called by the "Receive completed interrupt"
 *
 * @param Pointer to a circular buffer 
 */
bool pixhawk_parse(uint8_t data) {
 38c:	cf 93       	push	r28
 38e:	c8 2f       	mov	r28, r24
	//Text starts with STX = 0x02 and ends with ETX = 0x03
	//A message from the Pixhawk must have the following form: 
	// 0x02 | 0x02 | 0xXX (Command byte) | 0x03 
	
	//Turn on LED to signal Data transfer 
	port_led(true); 
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	e7 d0       	rcall	.+462    	; 0x564 <port_led>
	
	switch(rx_state) {
 396:	80 91 0d 01 	lds	r24, 0x010D
 39a:	82 30       	cpi	r24, 0x02	; 2
 39c:	01 f1       	breq	.+64     	; 0x3de <pixhawk_parse+0x52>
 39e:	83 30       	cpi	r24, 0x03	; 3
 3a0:	30 f4       	brcc	.+12     	; 0x3ae <pixhawk_parse+0x22>
 3a2:	88 23       	and	r24, r24
 3a4:	61 f0       	breq	.+24     	; 0x3be <pixhawk_parse+0x32>
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	09 f0       	breq	.+2      	; 0x3ac <pixhawk_parse+0x20>
 3aa:	51 c0       	rjmp	.+162    	; 0x44e <pixhawk_parse+0xc2>
 3ac:	0f c0       	rjmp	.+30     	; 0x3cc <pixhawk_parse+0x40>
 3ae:	84 30       	cpi	r24, 0x04	; 4
 3b0:	49 f1       	breq	.+82     	; 0x404 <pixhawk_parse+0x78>
 3b2:	84 30       	cpi	r24, 0x04	; 4
 3b4:	08 f1       	brcs	.+66     	; 0x3f8 <pixhawk_parse+0x6c>
 3b6:	85 30       	cpi	r24, 0x05	; 5
 3b8:	09 f0       	breq	.+2      	; 0x3bc <pixhawk_parse+0x30>
 3ba:	49 c0       	rjmp	.+146    	; 0x44e <pixhawk_parse+0xc2>
 3bc:	29 c0       	rjmp	.+82     	; 0x410 <pixhawk_parse+0x84>
		case IDLE: {
			//The state machine is idle and waits for chars to be sent 
			
			if(data == MSG_START) {
 3be:	c2 30       	cpi	r28, 0x02	; 2
 3c0:	09 f0       	breq	.+2      	; 0x3c4 <pixhawk_parse+0x38>
 3c2:	47 c0       	rjmp	.+142    	; 0x452 <pixhawk_parse+0xc6>
				//We received the first Start-Character
				
				rx_state = STARTCHAR; 			 
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	80 93 0d 01 	sts	0x010D, r24
 3ca:	43 c0       	rjmp	.+134    	; 0x452 <pixhawk_parse+0xc6>
			break; 
		}
		case STARTCHAR: {
			//The first Start-Character was sent and we are waiting for the second one now 
			
			if(data == MSG_START) {
 3cc:	c2 30       	cpi	r28, 0x02	; 2
 3ce:	21 f4       	brne	.+8      	; 0x3d8 <pixhawk_parse+0x4c>
				//We received the second Start-Character
				
				rx_state = COMMAND;
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	80 93 0d 01 	sts	0x010D, r24
 3d6:	3d c0       	rjmp	.+122    	; 0x452 <pixhawk_parse+0xc6>
				 
			} else {
				//No second Start-Character was sent => return to IDLE
				
				rx_state = IDLE; 
 3d8:	10 92 0d 01 	sts	0x010D, r1
 3dc:	3a c0       	rjmp	.+116    	; 0x452 <pixhawk_parse+0xc6>
			break;		
		}
		case COMMAND: {
			//The second Start-Character was sent, now we expect to receive the Command 
			
			if(data == MSG_START || data == MSG_END) {
 3de:	8c 2f       	mov	r24, r28
 3e0:	82 50       	subi	r24, 0x02	; 2
 3e2:	82 30       	cpi	r24, 0x02	; 2
 3e4:	18 f4       	brcc	.+6      	; 0x3ec <pixhawk_parse+0x60>
				//We received again a Start or End Character or a 0 => ERROR 
				//return to IDLE
				
				rx_state = IDLE; 
 3e6:	10 92 0d 01 	sts	0x010D, r1
 3ea:	33 c0       	rjmp	.+102    	; 0x452 <pixhawk_parse+0xc6>
			} else {
				//The char is valid => store it 
				
				cmd = data; 
 3ec:	c0 93 0e 01 	sts	0x010E, r28
				
				rx_state = HEAD0; 
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	80 93 0d 01 	sts	0x010D, r24
 3f6:	2d c0       	rjmp	.+90     	; 0x452 <pixhawk_parse+0xc6>
		case HEAD0: {
			//The command was sent => expect to receive the "heading0" char 
			//NOTE: We do not check, if we received a start or an End-Char, because it could happen that the heading contains one of these characters 

			//The char is valid => store it
			head0 = data; 
 3f8:	c0 93 0f 01 	sts	0x010F, r28
			rx_state = HEAD1;
 3fc:	84 e0       	ldi	r24, 0x04	; 4
 3fe:	80 93 0d 01 	sts	0x010D, r24
			
			break; 
 402:	27 c0       	rjmp	.+78     	; 0x452 <pixhawk_parse+0xc6>
		case HEAD1: {
			//The first heading byte was receives => expect to receive the second one 
			//NOTE: We do not check, if we received a start or an End-Char, because it could happen that the heading contains one of these characters 
			
			//The char is valid => store it
			head1 = data;
 404:	c0 93 10 01 	sts	0x0110, r28
			rx_state = ENDCHAR;
 408:	85 e0       	ldi	r24, 0x05	; 5
 40a:	80 93 0d 01 	sts	0x010D, r24
						
			break; 
 40e:	21 c0       	rjmp	.+66     	; 0x452 <pixhawk_parse+0xc6>
		}
		case ENDCHAR: {
			//The command byte was read and we wait for the end-byte 
			
			if(data == MSG_END) {
 410:	c3 30       	cpi	r28, 0x03	; 3
 412:	d1 f4       	brne	.+52     	; 0x448 <pixhawk_parse+0xbc>
				//We received the End Character => Data is valid 
				
				flag_send = true; 
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	80 93 11 01 	sts	0x0111, r24
				
				//Store the heading transmitted with the request
				state.heading = (uint16_t)(head0<<8) || (uint16_t)(head1);
 41a:	90 91 0f 01 	lds	r25, 0x010F
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	00 97       	sbiw	r24, 0x00	; 0
 422:	49 f4       	brne	.+18     	; 0x436 <pixhawk_parse+0xaa>
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	20 91 10 01 	lds	r18, 0x0110
 42c:	22 23       	and	r18, r18
 42e:	29 f4       	brne	.+10     	; 0x43a <pixhawk_parse+0xae>
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <pixhawk_parse+0xae>
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	90 93 6e 01 	sts	0x016E, r25
 43e:	80 93 6d 01 	sts	0x016D, r24
				
				rx_state = IDLE; 
 442:	10 92 0d 01 	sts	0x010D, r1
 446:	05 c0       	rjmp	.+10     	; 0x452 <pixhawk_parse+0xc6>
			
			} else {
				//Some error occurred => return to IDLE
		 				
				rx_state = IDLE;
 448:	10 92 0d 01 	sts	0x010D, r1
 44c:	02 c0       	rjmp	.+4      	; 0x452 <pixhawk_parse+0xc6>
		}
		default: {
			//This code should never be reached
			//Nothing we can do about, if we reach it...just go back to IDLE
			
			rx_state = IDLE; 
 44e:	10 92 0d 01 	sts	0x010D, r1
			break; 
		}
	}
	
	//Unlit LED
	port_led(false); 
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	86 d0       	rcall	.+268    	; 0x564 <port_led>
	
	
	return true; 
}
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <pixhawk_get_heading>:
 * Get the last known Heading of the boat
 *
 */
uint16_t pixhawk_get_heading(void) {
	return state.heading; 
}
 45e:	80 91 6d 01 	lds	r24, 0x016D
 462:	90 91 6e 01 	lds	r25, 0x016E
 466:	08 95       	ret

00000468 <send2pixhawk>:
/**
 * Send data to Pixhawk 
 *
 * @param 
 */
bool send2pixhawk(uint8_t cmd) {
 468:	cf 93       	push	r28
 46a:	c8 2f       	mov	r28, r24
	
	//First handle all Commands that do not need to send data back 
	switch(cmd) {
 46c:	80 32       	cpi	r24, 0x20	; 32
 46e:	19 f4       	brne	.+6      	; 0x476 <send2pixhawk+0xe>
		case CMD_RESET: {
			//Reset the Sensor to initial conditions 
			
			measure_init(); 
 470:	3c df       	rcall	.-392    	; 0x2ea <measure_init>
			return true;  
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	2c c0       	rjmp	.+88     	; 0x4ce <send2pixhawk+0x66>
	
	
	
	
	//Send start-sequence 
	serial_send_byte(MSG_START);
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	c7 d0       	rcall	.+398    	; 0x608 <serial_send_byte>
	serial_send_byte(MSG_START);
 47a:	82 e0       	ldi	r24, 0x02	; 2
 47c:	c5 d0       	rcall	.+394    	; 0x608 <serial_send_byte>
	
	//Send Command number 
	serial_send_byte(cmd); 
 47e:	8c 2f       	mov	r24, r28
 480:	c3 d0       	rcall	.+390    	; 0x608 <serial_send_byte>
	
	//Send individual data 
	switch(cmd) {
 482:	ce 34       	cpi	r28, 0x4E	; 78
 484:	91 f0       	breq	.+36     	; 0x4aa <send2pixhawk+0x42>
 486:	cf 34       	cpi	r28, 0x4F	; 79
 488:	19 f0       	breq	.+6      	; 0x490 <send2pixhawk+0x28>
 48a:	ca 34       	cpi	r28, 0x4A	; 74
 48c:	f9 f4       	brne	.+62     	; 0x4cc <send2pixhawk+0x64>
 48e:	13 c0       	rjmp	.+38     	; 0x4b6 <send2pixhawk+0x4e>
		case CMD_OBSTACLES: {
			
			//Send number of bytes that will be transmitted 
			serial_send_byte(state.numofobstacles*2);	
 490:	80 91 12 01 	lds	r24, 0x0112
 494:	88 0f       	add	r24, r24
 496:	b8 d0       	rcall	.+368    	; 0x608 <serial_send_byte>
			
			//Send the data for the obstacles 
			uint8_t i; 
			for(i = 0; i<state.numofobstacles; i++) {
 498:	90 91 12 01 	lds	r25, 0x0112
 49c:	99 23       	and	r25, r25
 49e:	99 f0       	breq	.+38     	; 0x4c6 <send2pixhawk+0x5e>
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	8f 5f       	subi	r24, 0xFF	; 255
 4a4:	89 17       	cp	r24, r25
 4a6:	e9 f7       	brne	.-6      	; 0x4a2 <send2pixhawk+0x3a>
 4a8:	0e c0       	rjmp	.+28     	; 0x4c6 <send2pixhawk+0x5e>
			break; 
		}
		case CMD_NUMOBSTACLES: {
			
			//Send the number of bytes that will be transmitted
			serial_send_byte(0x01); 
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	ad d0       	rcall	.+346    	; 0x608 <serial_send_byte>
			
			//Send the number of Obstacles 
			serial_send_byte(state.numofobstacles);
 4ae:	80 91 12 01 	lds	r24, 0x0112
 4b2:	aa d0       	rcall	.+340    	; 0x608 <serial_send_byte>
			
			break; 
 4b4:	08 c0       	rjmp	.+16     	; 0x4c6 <send2pixhawk+0x5e>
		}
		case CMD_LASTDIST: {
			//Return the last measured distance by the LIDAR in two bytes (high-byte first) 
			
			//Send the number of bytes that will be transmitted 
			serial_send_byte(0x02); 
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	a7 d0       	rcall	.+334    	; 0x608 <serial_send_byte>
			
			//Get the distance from the LIDAR
			uint16_t dist = lidar_get_distance();
 4ba:	90 de       	rcall	.-736    	; 0x1dc <lidar_get_distance>
 4bc:	c8 2f       	mov	r28, r24
			
			//Send the distance as high and low byte to the Pixhawk 
			serial_send_byte((uint8_t)(dist>>8)); 
 4be:	89 2f       	mov	r24, r25
 4c0:	a3 d0       	rcall	.+326    	; 0x608 <serial_send_byte>
			serial_send_byte((uint8_t)(dist)); 
 4c2:	8c 2f       	mov	r24, r28
 4c4:	a1 d0       	rcall	.+322    	; 0x608 <serial_send_byte>
			return false; 
		}
	}
	
	//Send end of Message 
	serial_send_byte(MSG_END);
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	9f d0       	rcall	.+318    	; 0x608 <serial_send_byte>
 4ca:	01 c0       	rjmp	.+2      	; 0x4ce <send2pixhawk+0x66>
		default: {
			//An invalid command was sent => might flag unhappy...
			
			//port_led_blink(2); 
			
			return false; 
 4cc:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	//Send end of Message 
	serial_send_byte(MSG_END);
	
}
 4ce:	cf 91       	pop	r28
 4d0:	08 95       	ret

000004d2 <pixhawk_handler>:
 * Note: This function should be called in every program loop 
 * 
 */
void pixhawk_handler(void) {

	if(flag_send) {
 4d2:	80 91 11 01 	lds	r24, 0x0111
 4d6:	88 23       	and	r24, r24
 4d8:	41 f0       	breq	.+16     	; 0x4ea <pixhawk_handler+0x18>
		//Data needs to be sent 
		//port_led_blink(2);
		
		//serial_send_byte(cmd); 
		send2pixhawk(cmd); 
 4da:	80 91 0e 01 	lds	r24, 0x010E
 4de:	c4 df       	rcall	.-120    	; 0x468 <send2pixhawk>
		
		cmd = 0x00;
 4e0:	10 92 0e 01 	sts	0x010E, r1
		flag_send = false;  
 4e4:	10 92 11 01 	sts	0x0111, r1
		
		#if DEBUG_MATLAB == 1
		//Do the next measurement step
		measure_handler();  
 4e8:	0c df       	rcall	.-488    	; 0x302 <measure_handler>
 4ea:	08 95       	ret

000004ec <main>:
#include "pixhawk.h"
#include "measure.h"

#include <util/delay.h>

int main(void) {
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	00 d0       	rcall	.+0      	; 0x4f2 <main+0x6>
 4f2:	0f 92       	push	r0
 4f4:	cd b7       	in	r28, 0x3d	; 61
 4f6:	de b7       	in	r29, 0x3e	; 62
	/************************************************************************/
	
	bool boot_state = true;		//true, if everything is fine during the boot process 
	
	//Disable any Interrupts 
	cli(); 
 4f8:	f8 94       	cli
	
	
	//Init the input/output ports 
	boot_state = boot_state && port_init(); 
 4fa:	2b d0       	rcall	.+86     	; 0x552 <port_init>
	
	//Init the use of a Servo
	boot_state = boot_state && servo_init(); 
 4fc:	88 23       	and	r24, r24
 4fe:	31 f1       	breq	.+76     	; 0x54c <main+0x60>
 500:	de d0       	rcall	.+444    	; 0x6be <servo_init>
 502:	88 23       	and	r24, r24
 504:	19 f1       	breq	.+70     	; 0x54c <main+0x60>
	
	//Init the use of the LIDAR 
	boot_state = boot_state && lidar_init();     //DEBUG: Remove true, this is only, because no lidar is present by now 
 506:	84 de       	rcall	.-760    	; 0x210 <lidar_init>
 508:	88 23       	and	r24, r24
 50a:	01 f1       	breq	.+64     	; 0x54c <main+0x60>
	
	//Init the use of the Pixhawk 
	boot_state = boot_state && pixhawk_init();					//DEBUG: add this init ot the bool boot_state
 50c:	38 df       	rcall	.-400    	; 0x37e <pixhawk_init>
 50e:	88 23       	and	r24, r24
 510:	e9 f0       	breq	.+58     	; 0x54c <main+0x60>
	
	//Init the measurement 
	boot_state = boot_state && measure_init(); 
 512:	eb de       	rcall	.-554    	; 0x2ea <measure_init>
 514:	88 23       	and	r24, r24
 516:	19 f0       	breq	.+6      	; 0x51e <main+0x32>
 518:	01 e0       	ldi	r16, 0x01	; 1
 51a:	10 e0       	ldi	r17, 0x00	; 0
 51c:	02 c0       	rjmp	.+4      	; 0x522 <main+0x36>
 51e:	00 e0       	ldi	r16, 0x00	; 0
 520:	10 e0       	ldi	r17, 0x00	; 0
	
	//Allow for Interrupts (e.g. for serial communication) 
	sei(); 
 522:	78 94       	sei
	
	
	//Write a message to the serial interface, that the boot-process was successful
	char str[] = {"OK"}; 
 524:	de 01       	movw	r26, r28
 526:	11 96       	adiw	r26, 0x01	; 1
 528:	e7 e0       	ldi	r30, 0x07	; 7
 52a:	f1 e0       	ldi	r31, 0x01	; 1
 52c:	83 e0       	ldi	r24, 0x03	; 3
 52e:	01 90       	ld	r0, Z+
 530:	0d 92       	st	X+, r0
 532:	81 50       	subi	r24, 0x01	; 1
 534:	e1 f7       	brne	.-8      	; 0x52e <main+0x42>
	serial_send_string(str); 
 536:	ce 01       	movw	r24, r28
 538:	01 96       	adiw	r24, 0x01	; 1
 53a:	6e d0       	rcall	.+220    	; 0x618 <serial_send_string>
	/************************************************************************/
	/* MAIN WHILE LOOP                                                      */
	/************************************************************************/
    while(1) {
		
		if(boot_state) {
 53c:	01 15       	cp	r16, r1
 53e:	11 05       	cpc	r17, r1
 540:	11 f0       	breq	.+4      	; 0x546 <main+0x5a>
		
			//***SEND DATA TO PIXHAWK 
			//The Pixhawk requests for data by sending commands. These commands are processed in the 
			//Interrupt routine of the UART. 
			//The answer to a request is sent when we have time in the pixhawk_handler(). 
			pixhawk_handler(); 
 542:	c7 df       	rcall	.-114    	; 0x4d2 <pixhawk_handler>
 544:	fb cf       	rjmp	.-10     	; 0x53c <main+0x50>
			//serial_send_string(buffer);
		
		} else {
			//Something went wrong during the boot-process => signal this state with a LED being constantly on
			
			port_led(true); 
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	0d d0       	rcall	.+26     	; 0x564 <port_led>
 54a:	f8 cf       	rjmp	.-16     	; 0x53c <main+0x50>
	
	//Init the use of the Pixhawk 
	boot_state = boot_state && pixhawk_init();					//DEBUG: add this init ot the bool boot_state
	
	//Init the measurement 
	boot_state = boot_state && measure_init(); 
 54c:	00 e0       	ldi	r16, 0x00	; 0
 54e:	10 e0       	ldi	r17, 0x00	; 0
 550:	e8 cf       	rjmp	.-48     	; 0x522 <main+0x36>

00000552 <port_init>:
 *
 */
bool port_init(void) {
	
	//Set data direction (Output/Input) 
	DDRB = 0xff;	//All ports are outputs
 552:	8f ef       	ldi	r24, 0xFF	; 255
 554:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;    //All ports are outputs
 556:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xff;    //All ports are outputs 
 558:	8a b9       	out	0x0a, r24	; 10
	
	//Set all Ports to logic zero (<=> OFF) 
	PORTB = 0x00; 
 55a:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00; 
 55c:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00; 
 55e:	1b b8       	out	0x0b, r1	; 11
	
	return true; 
} 
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	08 95       	ret

00000564 <port_led>:
 * Control the LED connected to PORT PB0
 *
 * @param state, true, iff the LED must be turned on, false else  
 */
void port_led(bool state) {
	if(state) {
 564:	88 23       	and	r24, r24
 566:	11 f0       	breq	.+4      	; 0x56c <port_led+0x8>
		PORTB |= (1<<PB0); 
 568:	28 9a       	sbi	0x05, 0	; 5
 56a:	08 95       	ret
	} else {
		PORTB &= ~(1<<PB0); 
 56c:	28 98       	cbi	0x05, 0	; 5
 56e:	08 95       	ret

00000570 <port_led_blink>:
	}
}

void port_led_blink(uint8_t times) {
 570:	cf 93       	push	r28
 572:	c8 2f       	mov	r28, r24
	while(times>0) {
 574:	88 23       	and	r24, r24
 576:	c1 f0       	breq	.+48     	; 0x5a8 <port_led_blink+0x38>
		port_led(true); 
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	f4 df       	rcall	.-24     	; 0x564 <port_led>
 57c:	8f ef       	ldi	r24, 0xFF	; 255
 57e:	92 e5       	ldi	r25, 0x52	; 82
 580:	a7 e0       	ldi	r26, 0x07	; 7
 582:	81 50       	subi	r24, 0x01	; 1
 584:	90 40       	sbci	r25, 0x00	; 0
 586:	a0 40       	sbci	r26, 0x00	; 0
 588:	e1 f7       	brne	.-8      	; 0x582 <port_led_blink+0x12>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <port_led_blink+0x1c>
 58c:	00 00       	nop
		_delay_ms(300); 
		port_led(false);
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	e9 df       	rcall	.-46     	; 0x564 <port_led>
 592:	8f ef       	ldi	r24, 0xFF	; 255
 594:	91 ee       	ldi	r25, 0xE1	; 225
 596:	a4 e0       	ldi	r26, 0x04	; 4
 598:	81 50       	subi	r24, 0x01	; 1
 59a:	90 40       	sbci	r25, 0x00	; 0
 59c:	a0 40       	sbci	r26, 0x00	; 0
 59e:	e1 f7       	brne	.-8      	; 0x598 <port_led_blink+0x28>
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <port_led_blink+0x32>
 5a2:	00 00       	nop
		_delay_ms(200);
		
		times -= 1; 
 5a4:	c1 50       	subi	r28, 0x01	; 1
		PORTB &= ~(1<<PB0); 
	}
}

void port_led_blink(uint8_t times) {
	while(times>0) {
 5a6:	41 f7       	brne	.-48     	; 0x578 <port_led_blink+0x8>
		port_led(false);
		_delay_ms(200);
		
		times -= 1; 
	}
 5a8:	cf 91       	pop	r28
 5aa:	08 95       	ret

000005ac <serial_init>:
 */
bool serial_init(unsigned int baud) {
	
	//Use "Asynchronous double speed mode U2X0 = 1) 
	//UCSR0A |= (1<<U2X0); double speed mode 
	UCSR0A &= ~(1<<U2X0); //normal speed mode 
 5ac:	e0 ec       	ldi	r30, 0xC0	; 192
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	20 81       	ld	r18, Z
 5b2:	2d 7f       	andi	r18, 0xFD	; 253
 5b4:	20 83       	st	Z, r18
	

	//Calculate the baudrate
	unsigned int ubrr = (double)(F_CPU/16/baud-1);  //Note change 16 to 8 for double speed mode 
 5b6:	9c 01       	movw	r18, r24
 5b8:	40 e0       	ldi	r20, 0x00	; 0
 5ba:	50 e0       	ldi	r21, 0x00	; 0
 5bc:	60 e2       	ldi	r22, 0x20	; 32
 5be:	71 ea       	ldi	r23, 0xA1	; 161
 5c0:	87 e0       	ldi	r24, 0x07	; 7
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	46 d2       	rcall	.+1164   	; 0xa52 <__divmodsi4>
 5c6:	ca 01       	movw	r24, r20
 5c8:	b9 01       	movw	r22, r18
 5ca:	61 50       	subi	r22, 0x01	; 1
 5cc:	70 40       	sbci	r23, 0x00	; 0
 5ce:	80 40       	sbci	r24, 0x00	; 0
 5d0:	90 40       	sbci	r25, 0x00	; 0
 5d2:	50 d1       	rcall	.+672    	; 0x874 <__floatsisf>
 5d4:	21 d1       	rcall	.+578    	; 0x818 <__fixunssfsi>
	
	//Set baudrate 
	UBRR0H = (unsigned char)(ubrr>>8); 
 5d6:	70 93 c5 00 	sts	0x00C5, r23
	UBRR0L = (unsigned char)ubrr; 
 5da:	60 93 c4 00 	sts	0x00C4, r22
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); 
 5de:	e1 ec       	ldi	r30, 0xC1	; 193
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	88 e1       	ldi	r24, 0x18	; 24
 5e4:	80 83       	st	Z, r24
	
	//Set frame format: 8data, 2stop bit 
	UCSR0C = (1<<USBS0)|(3<<UCSZ00); 
 5e6:	8e e0       	ldi	r24, 0x0E	; 14
 5e8:	80 93 c2 00 	sts	0x00C2, r24
	
	//Allow receive interrupts 
	UCSR0B |= (1<<RXCIE0); 
 5ec:	80 81       	ld	r24, Z
 5ee:	80 68       	ori	r24, 0x80	; 128
 5f0:	80 83       	st	Z, r24
 5f2:	8f ef       	ldi	r24, 0xFF	; 255
 5f4:	99 e6       	ldi	r25, 0x69	; 105
 5f6:	a8 e1       	ldi	r26, 0x18	; 24
 5f8:	81 50       	subi	r24, 0x01	; 1
 5fa:	90 40       	sbci	r25, 0x00	; 0
 5fc:	a0 40       	sbci	r26, 0x00	; 0
 5fe:	e1 f7       	brne	.-8      	; 0x5f8 <serial_init+0x4c>
 600:	00 c0       	rjmp	.+0      	; 0x602 <serial_init+0x56>
 602:	00 00       	nop
	//Wait a moment to Set registers 
	_delay_ms(1000); 
	
	//Everything is OK => return true
	return true; 
}
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	08 95       	ret

00000608 <serial_send_byte>:
 * @param data: byte to be sent 
 */
void serial_send_byte(uint8_t data) {
	
	//Wait for empty transmit buffer 
	while (!(UCSR0A & (1<<UDRE0))); 
 608:	e0 ec       	ldi	r30, 0xC0	; 192
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	90 81       	ld	r25, Z
 60e:	95 ff       	sbrs	r25, 5
 610:	fd cf       	rjmp	.-6      	; 0x60c <serial_send_byte+0x4>
	
	//Put data into the buffer and send it 
	UDR0 = data; 
 612:	80 93 c6 00 	sts	0x00C6, r24
}
 616:	08 95       	ret

00000618 <serial_send_string>:

void serial_send_string(char buf[]) {
 618:	0f 93       	push	r16
 61a:	1f 93       	push	r17
 61c:	cf 93       	push	r28
 61e:	8c 01       	movw	r16, r24
	uint8_t ind; 
	ind = 0; 
	
	//char buf[] = {"Jonas"}; 
	
	while(buf[ind] != 0x00) {
 620:	fc 01       	movw	r30, r24
 622:	80 81       	ld	r24, Z
 624:	88 23       	and	r24, r24
 626:	49 f0       	breq	.+18     	; 0x63a <serial_send_string+0x22>
}

void serial_send_string(char buf[]) {
	
	uint8_t ind; 
	ind = 0; 
 628:	c0 e0       	ldi	r28, 0x00	; 0
	
	//char buf[] = {"Jonas"}; 
	
	while(buf[ind] != 0x00) {
		serial_send_byte(buf[ind]); 
 62a:	ee df       	rcall	.-36     	; 0x608 <serial_send_byte>
		ind=ind+1;
 62c:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t ind; 
	ind = 0; 
	
	//char buf[] = {"Jonas"}; 
	
	while(buf[ind] != 0x00) {
 62e:	f8 01       	movw	r30, r16
 630:	ec 0f       	add	r30, r28
 632:	f1 1d       	adc	r31, r1
 634:	80 81       	ld	r24, Z
 636:	88 23       	and	r24, r24
 638:	c1 f7       	brne	.-16     	; 0x62a <serial_send_string+0x12>
		serial_send_byte(buf[ind]); 
		ind=ind+1;
	}
	  
	serial_send_byte('\n'); 
 63a:	8a e0       	ldi	r24, 0x0A	; 10
 63c:	e5 df       	rcall	.-54     	; 0x608 <serial_send_byte>
	serial_send_byte(0x0D);	//Send new line 
 63e:	8d e0       	ldi	r24, 0x0D	; 13
 640:	e3 df       	rcall	.-58     	; 0x608 <serial_send_byte>
	
}
 642:	cf 91       	pop	r28
 644:	1f 91       	pop	r17
 646:	0f 91       	pop	r16
 648:	08 95       	ret

0000064a <serial_receive_byte>:
 * @return received data byte 
 */
uint8_t serial_receive_byte(void) {
	
	//Wait for data to be reveived 
	while(!(UCSR0A & (1<<RXEN0))); 
 64a:	e0 ec       	ldi	r30, 0xC0	; 192
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	80 81       	ld	r24, Z
 650:	84 ff       	sbrs	r24, 4
 652:	fd cf       	rjmp	.-6      	; 0x64e <serial_receive_byte+0x4>
	
	//Get and return the received data from the buffer 
	return UDR0; 
 654:	80 91 c6 00 	lds	r24, 0x00C6
}
 658:	08 95       	ret

0000065a <__vector_18>:

/** 
 * Interrupt for complete reception. 
 * This interrupt occurs, as soon as a character was successfully read. 
 */
ISR(USART_RX_vect) {
 65a:	1f 92       	push	r1
 65c:	0f 92       	push	r0
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	0f 92       	push	r0
 662:	11 24       	eor	r1, r1
 664:	2f 93       	push	r18
 666:	3f 93       	push	r19
 668:	4f 93       	push	r20
 66a:	5f 93       	push	r21
 66c:	6f 93       	push	r22
 66e:	7f 93       	push	r23
 670:	8f 93       	push	r24
 672:	9f 93       	push	r25
 674:	af 93       	push	r26
 676:	bf 93       	push	r27
 678:	ef 93       	push	r30
 67a:	ff 93       	push	r31
	
	//Store data locally 
	uint8_t data = UDR0; 
 67c:	80 91 c6 00 	lds	r24, 0x00C6
	
	//Notify the Pixhawk-Module that new data is available 
	pixhawk_parse(data);
 680:	85 de       	rcall	.-758    	; 0x38c <pixhawk_parse>
	
}
 682:	ff 91       	pop	r31
 684:	ef 91       	pop	r30
 686:	bf 91       	pop	r27
 688:	af 91       	pop	r26
 68a:	9f 91       	pop	r25
 68c:	8f 91       	pop	r24
 68e:	7f 91       	pop	r23
 690:	6f 91       	pop	r22
 692:	5f 91       	pop	r21
 694:	4f 91       	pop	r20
 696:	3f 91       	pop	r19
 698:	2f 91       	pop	r18
 69a:	0f 90       	pop	r0
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	0f 90       	pop	r0
 6a0:	1f 90       	pop	r1
 6a2:	18 95       	reti

000006a4 <flush>:
 */ 
void flush(void) {
	uint8_t dummy;
	
	//Read the buffer until it is empty  
	while(UCSR0A & (1<<RXEN0)) {
 6a4:	80 91 c0 00 	lds	r24, 0x00C0
 6a8:	84 ff       	sbrs	r24, 4
 6aa:	08 c0       	rjmp	.+16     	; 0x6bc <flush+0x18>
		dummy = UDR0; 
 6ac:	a6 ec       	ldi	r26, 0xC6	; 198
 6ae:	b0 e0       	ldi	r27, 0x00	; 0
 */ 
void flush(void) {
	uint8_t dummy;
	
	//Read the buffer until it is empty  
	while(UCSR0A & (1<<RXEN0)) {
 6b0:	e0 ec       	ldi	r30, 0xC0	; 192
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
		dummy = UDR0; 
 6b4:	8c 91       	ld	r24, X
 */ 
void flush(void) {
	uint8_t dummy;
	
	//Read the buffer until it is empty  
	while(UCSR0A & (1<<RXEN0)) {
 6b6:	80 81       	ld	r24, Z
 6b8:	84 fd       	sbrc	r24, 4
 6ba:	fc cf       	rjmp	.-8      	; 0x6b4 <flush+0x10>
 6bc:	08 95       	ret

000006be <servo_init>:
/** 
 * Initialize the use of a Servo 	
 */
bool servo_init(void) {
	
	DDRD |= 0xFF;		//Set DDRD as output 
 6be:	8a b1       	in	r24, 0x0a	; 10
 6c0:	8f ef       	ldi	r24, 0xFF	; 255
 6c2:	8a b9       	out	0x0a, r24	; 10
	TCCR1A |= (1<<WGM11) | (1<<COM1A1);	//Set mode 
 6c4:	e0 e8       	ldi	r30, 0x80	; 128
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	82 68       	ori	r24, 0x82	; 130
 6cc:	80 83       	st	Z, r24
	
	//Set Wave-Form of PWM 	
	TCCR1B |= 1<<WGM13 | 1<<WGM12 | 1<<CS10;
 6ce:	e1 e8       	ldi	r30, 0x81	; 129
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	89 61       	ori	r24, 0x19	; 25
 6d6:	80 83       	st	Z, r24
	
	TCCR1B |= (1<<CS11);	//Use Prescalor of 8 => FCPU/8
 6d8:	80 81       	ld	r24, Z
 6da:	82 60       	ori	r24, 0x02	; 2
 6dc:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS10); 
 6de:	80 81       	ld	r24, Z
 6e0:	8e 7f       	andi	r24, 0xFE	; 254
 6e2:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS12); 
 6e4:	80 81       	ld	r24, Z
 6e6:	8b 7f       	andi	r24, 0xFB	; 251
 6e8:	80 83       	st	Z, r24
	
	//Set maximum Timer-Count 
	// ICR1 = F_CPU/(Servo acceptable Value in Hz); 
	ICR1 = 19999; 
 6ea:	e6 e8       	ldi	r30, 0x86	; 134
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	8f e1       	ldi	r24, 0x1F	; 31
 6f0:	9e e4       	ldi	r25, 0x4E	; 78
 6f2:	91 83       	std	Z+1, r25	; 0x01
 6f4:	80 83       	st	Z, r24
	//OCR1A = ICR1 - (maxPWM-minPWM)/2 + minPWM; 
	//OCR1A = ICR1 - minPWM; 
	//servo_set(180);
	
	//OCR1A = ICR1 - middlePWM;  
	OCR1A = ICR1 - minPWM; 
 6f6:	80 81       	ld	r24, Z
 6f8:	91 81       	ldd	r25, Z+1	; 0x01
 6fa:	8f 53       	subi	r24, 0x3F	; 63
 6fc:	92 40       	sbci	r25, 0x02	; 2
 6fe:	90 93 89 00 	sts	0x0089, r25
 702:	80 93 88 00 	sts	0x0088, r24
	_delay_ms(1000);
	OCR1A = ICR1 - maxPWM; */
	
	
	return true; 
}
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	08 95       	ret

0000070a <servo_set>:
 * 
 * @param deg: angle in degrees the servo should move to 
 */
void servo_set(float deg) {
    
	uint16_t pwm = ((maxPWM-minPWM)/ServoRange*deg + minPWM);
 70a:	20 e0       	ldi	r18, 0x00	; 0
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	40 e2       	ldi	r20, 0x20	; 32
 710:	51 e4       	ldi	r21, 0x41	; 65
 712:	3c d1       	rcall	.+632    	; 0x98c <__mulsf3>
 714:	20 e0       	ldi	r18, 0x00	; 0
 716:	30 ec       	ldi	r19, 0xC0	; 192
 718:	4f e0       	ldi	r20, 0x0F	; 15
 71a:	54 e4       	ldi	r21, 0x44	; 68
 71c:	19 d0       	rcall	.+50     	; 0x750 <__addsf3>
 71e:	7c d0       	rcall	.+248    	; 0x818 <__fixunssfsi>
	
	//Saturate PWM output
	if(pwm<minPWM) {
 720:	22 e0       	ldi	r18, 0x02	; 2
 722:	6f 33       	cpi	r22, 0x3F	; 63
 724:	72 07       	cpc	r23, r18
 726:	10 f4       	brcc	.+4      	; 0x72c <servo_set+0x22>
		pwm = minPWM; 
 728:	6f e3       	ldi	r22, 0x3F	; 63
 72a:	72 e0       	ldi	r23, 0x02	; 2
	
	if(pwm>maxPWM) {
		pwm = maxPWM;
	}
	
	OCR1A = ICR1 - pwm; 
 72c:	80 91 86 00 	lds	r24, 0x0086
 730:	90 91 87 00 	lds	r25, 0x0087
 734:	29 e0       	ldi	r18, 0x09	; 9
 736:	68 34       	cpi	r22, 0x48	; 72
 738:	72 07       	cpc	r23, r18
 73a:	10 f0       	brcs	.+4      	; 0x740 <servo_set+0x36>
 73c:	67 e4       	ldi	r22, 0x47	; 71
 73e:	79 e0       	ldi	r23, 0x09	; 9
 740:	86 1b       	sub	r24, r22
 742:	97 0b       	sbc	r25, r23
 744:	90 93 89 00 	sts	0x0089, r25
 748:	80 93 88 00 	sts	0x0088, r24
	
	//OCR1A = ICR1 - deg; 
 74c:	08 95       	ret

0000074e <__subsf3>:
 74e:	50 58       	subi	r21, 0x80	; 128

00000750 <__addsf3>:
 750:	bb 27       	eor	r27, r27
 752:	aa 27       	eor	r26, r26
 754:	0e d0       	rcall	.+28     	; 0x772 <__addsf3x>
 756:	e0 c0       	rjmp	.+448    	; 0x918 <__fp_round>
 758:	d1 d0       	rcall	.+418    	; 0x8fc <__fp_pscA>
 75a:	30 f0       	brcs	.+12     	; 0x768 <__addsf3+0x18>
 75c:	d6 d0       	rcall	.+428    	; 0x90a <__fp_pscB>
 75e:	20 f0       	brcs	.+8      	; 0x768 <__addsf3+0x18>
 760:	31 f4       	brne	.+12     	; 0x76e <__addsf3+0x1e>
 762:	9f 3f       	cpi	r25, 0xFF	; 255
 764:	11 f4       	brne	.+4      	; 0x76a <__addsf3+0x1a>
 766:	1e f4       	brtc	.+6      	; 0x76e <__addsf3+0x1e>
 768:	c6 c0       	rjmp	.+396    	; 0x8f6 <__fp_nan>
 76a:	0e f4       	brtc	.+2      	; 0x76e <__addsf3+0x1e>
 76c:	e0 95       	com	r30
 76e:	e7 fb       	bst	r30, 7
 770:	bc c0       	rjmp	.+376    	; 0x8ea <__fp_inf>

00000772 <__addsf3x>:
 772:	e9 2f       	mov	r30, r25
 774:	e2 d0       	rcall	.+452    	; 0x93a <__fp_split3>
 776:	80 f3       	brcs	.-32     	; 0x758 <__addsf3+0x8>
 778:	ba 17       	cp	r27, r26
 77a:	62 07       	cpc	r22, r18
 77c:	73 07       	cpc	r23, r19
 77e:	84 07       	cpc	r24, r20
 780:	95 07       	cpc	r25, r21
 782:	18 f0       	brcs	.+6      	; 0x78a <__addsf3x+0x18>
 784:	71 f4       	brne	.+28     	; 0x7a2 <__addsf3x+0x30>
 786:	9e f5       	brtc	.+102    	; 0x7ee <__addsf3x+0x7c>
 788:	fa c0       	rjmp	.+500    	; 0x97e <__fp_zero>
 78a:	0e f4       	brtc	.+2      	; 0x78e <__addsf3x+0x1c>
 78c:	e0 95       	com	r30
 78e:	0b 2e       	mov	r0, r27
 790:	ba 2f       	mov	r27, r26
 792:	a0 2d       	mov	r26, r0
 794:	0b 01       	movw	r0, r22
 796:	b9 01       	movw	r22, r18
 798:	90 01       	movw	r18, r0
 79a:	0c 01       	movw	r0, r24
 79c:	ca 01       	movw	r24, r20
 79e:	a0 01       	movw	r20, r0
 7a0:	11 24       	eor	r1, r1
 7a2:	ff 27       	eor	r31, r31
 7a4:	59 1b       	sub	r21, r25
 7a6:	99 f0       	breq	.+38     	; 0x7ce <__addsf3x+0x5c>
 7a8:	59 3f       	cpi	r21, 0xF9	; 249
 7aa:	50 f4       	brcc	.+20     	; 0x7c0 <__addsf3x+0x4e>
 7ac:	50 3e       	cpi	r21, 0xE0	; 224
 7ae:	68 f1       	brcs	.+90     	; 0x80a <__addsf3x+0x98>
 7b0:	1a 16       	cp	r1, r26
 7b2:	f0 40       	sbci	r31, 0x00	; 0
 7b4:	a2 2f       	mov	r26, r18
 7b6:	23 2f       	mov	r18, r19
 7b8:	34 2f       	mov	r19, r20
 7ba:	44 27       	eor	r20, r20
 7bc:	58 5f       	subi	r21, 0xF8	; 248
 7be:	f3 cf       	rjmp	.-26     	; 0x7a6 <__addsf3x+0x34>
 7c0:	46 95       	lsr	r20
 7c2:	37 95       	ror	r19
 7c4:	27 95       	ror	r18
 7c6:	a7 95       	ror	r26
 7c8:	f0 40       	sbci	r31, 0x00	; 0
 7ca:	53 95       	inc	r21
 7cc:	c9 f7       	brne	.-14     	; 0x7c0 <__addsf3x+0x4e>
 7ce:	7e f4       	brtc	.+30     	; 0x7ee <__addsf3x+0x7c>
 7d0:	1f 16       	cp	r1, r31
 7d2:	ba 0b       	sbc	r27, r26
 7d4:	62 0b       	sbc	r22, r18
 7d6:	73 0b       	sbc	r23, r19
 7d8:	84 0b       	sbc	r24, r20
 7da:	ba f0       	brmi	.+46     	; 0x80a <__addsf3x+0x98>
 7dc:	91 50       	subi	r25, 0x01	; 1
 7de:	a1 f0       	breq	.+40     	; 0x808 <__addsf3x+0x96>
 7e0:	ff 0f       	add	r31, r31
 7e2:	bb 1f       	adc	r27, r27
 7e4:	66 1f       	adc	r22, r22
 7e6:	77 1f       	adc	r23, r23
 7e8:	88 1f       	adc	r24, r24
 7ea:	c2 f7       	brpl	.-16     	; 0x7dc <__addsf3x+0x6a>
 7ec:	0e c0       	rjmp	.+28     	; 0x80a <__addsf3x+0x98>
 7ee:	ba 0f       	add	r27, r26
 7f0:	62 1f       	adc	r22, r18
 7f2:	73 1f       	adc	r23, r19
 7f4:	84 1f       	adc	r24, r20
 7f6:	48 f4       	brcc	.+18     	; 0x80a <__addsf3x+0x98>
 7f8:	87 95       	ror	r24
 7fa:	77 95       	ror	r23
 7fc:	67 95       	ror	r22
 7fe:	b7 95       	ror	r27
 800:	f7 95       	ror	r31
 802:	9e 3f       	cpi	r25, 0xFE	; 254
 804:	08 f0       	brcs	.+2      	; 0x808 <__addsf3x+0x96>
 806:	b3 cf       	rjmp	.-154    	; 0x76e <__addsf3+0x1e>
 808:	93 95       	inc	r25
 80a:	88 0f       	add	r24, r24
 80c:	08 f0       	brcs	.+2      	; 0x810 <__addsf3x+0x9e>
 80e:	99 27       	eor	r25, r25
 810:	ee 0f       	add	r30, r30
 812:	97 95       	ror	r25
 814:	87 95       	ror	r24
 816:	08 95       	ret

00000818 <__fixunssfsi>:
 818:	98 d0       	rcall	.+304    	; 0x94a <__fp_splitA>
 81a:	88 f0       	brcs	.+34     	; 0x83e <__fixunssfsi+0x26>
 81c:	9f 57       	subi	r25, 0x7F	; 127
 81e:	90 f0       	brcs	.+36     	; 0x844 <__fixunssfsi+0x2c>
 820:	b9 2f       	mov	r27, r25
 822:	99 27       	eor	r25, r25
 824:	b7 51       	subi	r27, 0x17	; 23
 826:	a0 f0       	brcs	.+40     	; 0x850 <__fixunssfsi+0x38>
 828:	d1 f0       	breq	.+52     	; 0x85e <__fixunssfsi+0x46>
 82a:	66 0f       	add	r22, r22
 82c:	77 1f       	adc	r23, r23
 82e:	88 1f       	adc	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	1a f0       	brmi	.+6      	; 0x83a <__fixunssfsi+0x22>
 834:	ba 95       	dec	r27
 836:	c9 f7       	brne	.-14     	; 0x82a <__fixunssfsi+0x12>
 838:	12 c0       	rjmp	.+36     	; 0x85e <__fixunssfsi+0x46>
 83a:	b1 30       	cpi	r27, 0x01	; 1
 83c:	81 f0       	breq	.+32     	; 0x85e <__fixunssfsi+0x46>
 83e:	9f d0       	rcall	.+318    	; 0x97e <__fp_zero>
 840:	b1 e0       	ldi	r27, 0x01	; 1
 842:	08 95       	ret
 844:	9c c0       	rjmp	.+312    	; 0x97e <__fp_zero>
 846:	67 2f       	mov	r22, r23
 848:	78 2f       	mov	r23, r24
 84a:	88 27       	eor	r24, r24
 84c:	b8 5f       	subi	r27, 0xF8	; 248
 84e:	39 f0       	breq	.+14     	; 0x85e <__fixunssfsi+0x46>
 850:	b9 3f       	cpi	r27, 0xF9	; 249
 852:	cc f3       	brlt	.-14     	; 0x846 <__fixunssfsi+0x2e>
 854:	86 95       	lsr	r24
 856:	77 95       	ror	r23
 858:	67 95       	ror	r22
 85a:	b3 95       	inc	r27
 85c:	d9 f7       	brne	.-10     	; 0x854 <__fixunssfsi+0x3c>
 85e:	3e f4       	brtc	.+14     	; 0x86e <__fixunssfsi+0x56>
 860:	90 95       	com	r25
 862:	80 95       	com	r24
 864:	70 95       	com	r23
 866:	61 95       	neg	r22
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	8f 4f       	sbci	r24, 0xFF	; 255
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	08 95       	ret

00000870 <__floatunsisf>:
 870:	e8 94       	clt
 872:	09 c0       	rjmp	.+18     	; 0x886 <__floatsisf+0x12>

00000874 <__floatsisf>:
 874:	97 fb       	bst	r25, 7
 876:	3e f4       	brtc	.+14     	; 0x886 <__floatsisf+0x12>
 878:	90 95       	com	r25
 87a:	80 95       	com	r24
 87c:	70 95       	com	r23
 87e:	61 95       	neg	r22
 880:	7f 4f       	sbci	r23, 0xFF	; 255
 882:	8f 4f       	sbci	r24, 0xFF	; 255
 884:	9f 4f       	sbci	r25, 0xFF	; 255
 886:	99 23       	and	r25, r25
 888:	a9 f0       	breq	.+42     	; 0x8b4 <__floatsisf+0x40>
 88a:	f9 2f       	mov	r31, r25
 88c:	96 e9       	ldi	r25, 0x96	; 150
 88e:	bb 27       	eor	r27, r27
 890:	93 95       	inc	r25
 892:	f6 95       	lsr	r31
 894:	87 95       	ror	r24
 896:	77 95       	ror	r23
 898:	67 95       	ror	r22
 89a:	b7 95       	ror	r27
 89c:	f1 11       	cpse	r31, r1
 89e:	f8 cf       	rjmp	.-16     	; 0x890 <__floatsisf+0x1c>
 8a0:	fa f4       	brpl	.+62     	; 0x8e0 <__floatsisf+0x6c>
 8a2:	bb 0f       	add	r27, r27
 8a4:	11 f4       	brne	.+4      	; 0x8aa <__floatsisf+0x36>
 8a6:	60 ff       	sbrs	r22, 0
 8a8:	1b c0       	rjmp	.+54     	; 0x8e0 <__floatsisf+0x6c>
 8aa:	6f 5f       	subi	r22, 0xFF	; 255
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255
 8ae:	8f 4f       	sbci	r24, 0xFF	; 255
 8b0:	9f 4f       	sbci	r25, 0xFF	; 255
 8b2:	16 c0       	rjmp	.+44     	; 0x8e0 <__floatsisf+0x6c>
 8b4:	88 23       	and	r24, r24
 8b6:	11 f0       	breq	.+4      	; 0x8bc <__floatsisf+0x48>
 8b8:	96 e9       	ldi	r25, 0x96	; 150
 8ba:	11 c0       	rjmp	.+34     	; 0x8de <__floatsisf+0x6a>
 8bc:	77 23       	and	r23, r23
 8be:	21 f0       	breq	.+8      	; 0x8c8 <__floatsisf+0x54>
 8c0:	9e e8       	ldi	r25, 0x8E	; 142
 8c2:	87 2f       	mov	r24, r23
 8c4:	76 2f       	mov	r23, r22
 8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <__floatsisf+0x5e>
 8c8:	66 23       	and	r22, r22
 8ca:	71 f0       	breq	.+28     	; 0x8e8 <__floatsisf+0x74>
 8cc:	96 e8       	ldi	r25, 0x86	; 134
 8ce:	86 2f       	mov	r24, r22
 8d0:	70 e0       	ldi	r23, 0x00	; 0
 8d2:	60 e0       	ldi	r22, 0x00	; 0
 8d4:	2a f0       	brmi	.+10     	; 0x8e0 <__floatsisf+0x6c>
 8d6:	9a 95       	dec	r25
 8d8:	66 0f       	add	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	da f7       	brpl	.-10     	; 0x8d6 <__floatsisf+0x62>
 8e0:	88 0f       	add	r24, r24
 8e2:	96 95       	lsr	r25
 8e4:	87 95       	ror	r24
 8e6:	97 f9       	bld	r25, 7
 8e8:	08 95       	ret

000008ea <__fp_inf>:
 8ea:	97 f9       	bld	r25, 7
 8ec:	9f 67       	ori	r25, 0x7F	; 127
 8ee:	80 e8       	ldi	r24, 0x80	; 128
 8f0:	70 e0       	ldi	r23, 0x00	; 0
 8f2:	60 e0       	ldi	r22, 0x00	; 0
 8f4:	08 95       	ret

000008f6 <__fp_nan>:
 8f6:	9f ef       	ldi	r25, 0xFF	; 255
 8f8:	80 ec       	ldi	r24, 0xC0	; 192
 8fa:	08 95       	ret

000008fc <__fp_pscA>:
 8fc:	00 24       	eor	r0, r0
 8fe:	0a 94       	dec	r0
 900:	16 16       	cp	r1, r22
 902:	17 06       	cpc	r1, r23
 904:	18 06       	cpc	r1, r24
 906:	09 06       	cpc	r0, r25
 908:	08 95       	ret

0000090a <__fp_pscB>:
 90a:	00 24       	eor	r0, r0
 90c:	0a 94       	dec	r0
 90e:	12 16       	cp	r1, r18
 910:	13 06       	cpc	r1, r19
 912:	14 06       	cpc	r1, r20
 914:	05 06       	cpc	r0, r21
 916:	08 95       	ret

00000918 <__fp_round>:
 918:	09 2e       	mov	r0, r25
 91a:	03 94       	inc	r0
 91c:	00 0c       	add	r0, r0
 91e:	11 f4       	brne	.+4      	; 0x924 <__fp_round+0xc>
 920:	88 23       	and	r24, r24
 922:	52 f0       	brmi	.+20     	; 0x938 <__fp_round+0x20>
 924:	bb 0f       	add	r27, r27
 926:	40 f4       	brcc	.+16     	; 0x938 <__fp_round+0x20>
 928:	bf 2b       	or	r27, r31
 92a:	11 f4       	brne	.+4      	; 0x930 <__fp_round+0x18>
 92c:	60 ff       	sbrs	r22, 0
 92e:	04 c0       	rjmp	.+8      	; 0x938 <__fp_round+0x20>
 930:	6f 5f       	subi	r22, 0xFF	; 255
 932:	7f 4f       	sbci	r23, 0xFF	; 255
 934:	8f 4f       	sbci	r24, 0xFF	; 255
 936:	9f 4f       	sbci	r25, 0xFF	; 255
 938:	08 95       	ret

0000093a <__fp_split3>:
 93a:	57 fd       	sbrc	r21, 7
 93c:	90 58       	subi	r25, 0x80	; 128
 93e:	44 0f       	add	r20, r20
 940:	55 1f       	adc	r21, r21
 942:	59 f0       	breq	.+22     	; 0x95a <__fp_splitA+0x10>
 944:	5f 3f       	cpi	r21, 0xFF	; 255
 946:	71 f0       	breq	.+28     	; 0x964 <__fp_splitA+0x1a>
 948:	47 95       	ror	r20

0000094a <__fp_splitA>:
 94a:	88 0f       	add	r24, r24
 94c:	97 fb       	bst	r25, 7
 94e:	99 1f       	adc	r25, r25
 950:	61 f0       	breq	.+24     	; 0x96a <__fp_splitA+0x20>
 952:	9f 3f       	cpi	r25, 0xFF	; 255
 954:	79 f0       	breq	.+30     	; 0x974 <__fp_splitA+0x2a>
 956:	87 95       	ror	r24
 958:	08 95       	ret
 95a:	12 16       	cp	r1, r18
 95c:	13 06       	cpc	r1, r19
 95e:	14 06       	cpc	r1, r20
 960:	55 1f       	adc	r21, r21
 962:	f2 cf       	rjmp	.-28     	; 0x948 <__fp_split3+0xe>
 964:	46 95       	lsr	r20
 966:	f1 df       	rcall	.-30     	; 0x94a <__fp_splitA>
 968:	08 c0       	rjmp	.+16     	; 0x97a <__fp_splitA+0x30>
 96a:	16 16       	cp	r1, r22
 96c:	17 06       	cpc	r1, r23
 96e:	18 06       	cpc	r1, r24
 970:	99 1f       	adc	r25, r25
 972:	f1 cf       	rjmp	.-30     	; 0x956 <__fp_splitA+0xc>
 974:	86 95       	lsr	r24
 976:	71 05       	cpc	r23, r1
 978:	61 05       	cpc	r22, r1
 97a:	08 94       	sec
 97c:	08 95       	ret

0000097e <__fp_zero>:
 97e:	e8 94       	clt

00000980 <__fp_szero>:
 980:	bb 27       	eor	r27, r27
 982:	66 27       	eor	r22, r22
 984:	77 27       	eor	r23, r23
 986:	cb 01       	movw	r24, r22
 988:	97 f9       	bld	r25, 7
 98a:	08 95       	ret

0000098c <__mulsf3>:
 98c:	0b d0       	rcall	.+22     	; 0x9a4 <__mulsf3x>
 98e:	c4 cf       	rjmp	.-120    	; 0x918 <__fp_round>
 990:	b5 df       	rcall	.-150    	; 0x8fc <__fp_pscA>
 992:	28 f0       	brcs	.+10     	; 0x99e <__mulsf3+0x12>
 994:	ba df       	rcall	.-140    	; 0x90a <__fp_pscB>
 996:	18 f0       	brcs	.+6      	; 0x99e <__mulsf3+0x12>
 998:	95 23       	and	r25, r21
 99a:	09 f0       	breq	.+2      	; 0x99e <__mulsf3+0x12>
 99c:	a6 cf       	rjmp	.-180    	; 0x8ea <__fp_inf>
 99e:	ab cf       	rjmp	.-170    	; 0x8f6 <__fp_nan>
 9a0:	11 24       	eor	r1, r1
 9a2:	ee cf       	rjmp	.-36     	; 0x980 <__fp_szero>

000009a4 <__mulsf3x>:
 9a4:	ca df       	rcall	.-108    	; 0x93a <__fp_split3>
 9a6:	a0 f3       	brcs	.-24     	; 0x990 <__mulsf3+0x4>

000009a8 <__mulsf3_pse>:
 9a8:	95 9f       	mul	r25, r21
 9aa:	d1 f3       	breq	.-12     	; 0x9a0 <__mulsf3+0x14>
 9ac:	95 0f       	add	r25, r21
 9ae:	50 e0       	ldi	r21, 0x00	; 0
 9b0:	55 1f       	adc	r21, r21
 9b2:	62 9f       	mul	r22, r18
 9b4:	f0 01       	movw	r30, r0
 9b6:	72 9f       	mul	r23, r18
 9b8:	bb 27       	eor	r27, r27
 9ba:	f0 0d       	add	r31, r0
 9bc:	b1 1d       	adc	r27, r1
 9be:	63 9f       	mul	r22, r19
 9c0:	aa 27       	eor	r26, r26
 9c2:	f0 0d       	add	r31, r0
 9c4:	b1 1d       	adc	r27, r1
 9c6:	aa 1f       	adc	r26, r26
 9c8:	64 9f       	mul	r22, r20
 9ca:	66 27       	eor	r22, r22
 9cc:	b0 0d       	add	r27, r0
 9ce:	a1 1d       	adc	r26, r1
 9d0:	66 1f       	adc	r22, r22
 9d2:	82 9f       	mul	r24, r18
 9d4:	22 27       	eor	r18, r18
 9d6:	b0 0d       	add	r27, r0
 9d8:	a1 1d       	adc	r26, r1
 9da:	62 1f       	adc	r22, r18
 9dc:	73 9f       	mul	r23, r19
 9de:	b0 0d       	add	r27, r0
 9e0:	a1 1d       	adc	r26, r1
 9e2:	62 1f       	adc	r22, r18
 9e4:	83 9f       	mul	r24, r19
 9e6:	a0 0d       	add	r26, r0
 9e8:	61 1d       	adc	r22, r1
 9ea:	22 1f       	adc	r18, r18
 9ec:	74 9f       	mul	r23, r20
 9ee:	33 27       	eor	r19, r19
 9f0:	a0 0d       	add	r26, r0
 9f2:	61 1d       	adc	r22, r1
 9f4:	23 1f       	adc	r18, r19
 9f6:	84 9f       	mul	r24, r20
 9f8:	60 0d       	add	r22, r0
 9fa:	21 1d       	adc	r18, r1
 9fc:	82 2f       	mov	r24, r18
 9fe:	76 2f       	mov	r23, r22
 a00:	6a 2f       	mov	r22, r26
 a02:	11 24       	eor	r1, r1
 a04:	9f 57       	subi	r25, 0x7F	; 127
 a06:	50 40       	sbci	r21, 0x00	; 0
 a08:	8a f0       	brmi	.+34     	; 0xa2c <__mulsf3_pse+0x84>
 a0a:	e1 f0       	breq	.+56     	; 0xa44 <__mulsf3_pse+0x9c>
 a0c:	88 23       	and	r24, r24
 a0e:	4a f0       	brmi	.+18     	; 0xa22 <__mulsf3_pse+0x7a>
 a10:	ee 0f       	add	r30, r30
 a12:	ff 1f       	adc	r31, r31
 a14:	bb 1f       	adc	r27, r27
 a16:	66 1f       	adc	r22, r22
 a18:	77 1f       	adc	r23, r23
 a1a:	88 1f       	adc	r24, r24
 a1c:	91 50       	subi	r25, 0x01	; 1
 a1e:	50 40       	sbci	r21, 0x00	; 0
 a20:	a9 f7       	brne	.-22     	; 0xa0c <__mulsf3_pse+0x64>
 a22:	9e 3f       	cpi	r25, 0xFE	; 254
 a24:	51 05       	cpc	r21, r1
 a26:	70 f0       	brcs	.+28     	; 0xa44 <__mulsf3_pse+0x9c>
 a28:	60 cf       	rjmp	.-320    	; 0x8ea <__fp_inf>
 a2a:	aa cf       	rjmp	.-172    	; 0x980 <__fp_szero>
 a2c:	5f 3f       	cpi	r21, 0xFF	; 255
 a2e:	ec f3       	brlt	.-6      	; 0xa2a <__mulsf3_pse+0x82>
 a30:	98 3e       	cpi	r25, 0xE8	; 232
 a32:	dc f3       	brlt	.-10     	; 0xa2a <__mulsf3_pse+0x82>
 a34:	86 95       	lsr	r24
 a36:	77 95       	ror	r23
 a38:	67 95       	ror	r22
 a3a:	b7 95       	ror	r27
 a3c:	f7 95       	ror	r31
 a3e:	e7 95       	ror	r30
 a40:	9f 5f       	subi	r25, 0xFF	; 255
 a42:	c1 f7       	brne	.-16     	; 0xa34 <__mulsf3_pse+0x8c>
 a44:	fe 2b       	or	r31, r30
 a46:	88 0f       	add	r24, r24
 a48:	91 1d       	adc	r25, r1
 a4a:	96 95       	lsr	r25
 a4c:	87 95       	ror	r24
 a4e:	97 f9       	bld	r25, 7
 a50:	08 95       	ret

00000a52 <__divmodsi4>:
 a52:	97 fb       	bst	r25, 7
 a54:	09 2e       	mov	r0, r25
 a56:	05 26       	eor	r0, r21
 a58:	0e d0       	rcall	.+28     	; 0xa76 <__divmodsi4_neg1>
 a5a:	57 fd       	sbrc	r21, 7
 a5c:	04 d0       	rcall	.+8      	; 0xa66 <__divmodsi4_neg2>
 a5e:	14 d0       	rcall	.+40     	; 0xa88 <__udivmodsi4>
 a60:	0a d0       	rcall	.+20     	; 0xa76 <__divmodsi4_neg1>
 a62:	00 1c       	adc	r0, r0
 a64:	38 f4       	brcc	.+14     	; 0xa74 <__divmodsi4_exit>

00000a66 <__divmodsi4_neg2>:
 a66:	50 95       	com	r21
 a68:	40 95       	com	r20
 a6a:	30 95       	com	r19
 a6c:	21 95       	neg	r18
 a6e:	3f 4f       	sbci	r19, 0xFF	; 255
 a70:	4f 4f       	sbci	r20, 0xFF	; 255
 a72:	5f 4f       	sbci	r21, 0xFF	; 255

00000a74 <__divmodsi4_exit>:
 a74:	08 95       	ret

00000a76 <__divmodsi4_neg1>:
 a76:	f6 f7       	brtc	.-4      	; 0xa74 <__divmodsi4_exit>
 a78:	90 95       	com	r25
 a7a:	80 95       	com	r24
 a7c:	70 95       	com	r23
 a7e:	61 95       	neg	r22
 a80:	7f 4f       	sbci	r23, 0xFF	; 255
 a82:	8f 4f       	sbci	r24, 0xFF	; 255
 a84:	9f 4f       	sbci	r25, 0xFF	; 255
 a86:	08 95       	ret

00000a88 <__udivmodsi4>:
 a88:	a1 e2       	ldi	r26, 0x21	; 33
 a8a:	1a 2e       	mov	r1, r26
 a8c:	aa 1b       	sub	r26, r26
 a8e:	bb 1b       	sub	r27, r27
 a90:	fd 01       	movw	r30, r26
 a92:	0d c0       	rjmp	.+26     	; 0xaae <__udivmodsi4_ep>

00000a94 <__udivmodsi4_loop>:
 a94:	aa 1f       	adc	r26, r26
 a96:	bb 1f       	adc	r27, r27
 a98:	ee 1f       	adc	r30, r30
 a9a:	ff 1f       	adc	r31, r31
 a9c:	a2 17       	cp	r26, r18
 a9e:	b3 07       	cpc	r27, r19
 aa0:	e4 07       	cpc	r30, r20
 aa2:	f5 07       	cpc	r31, r21
 aa4:	20 f0       	brcs	.+8      	; 0xaae <__udivmodsi4_ep>
 aa6:	a2 1b       	sub	r26, r18
 aa8:	b3 0b       	sbc	r27, r19
 aaa:	e4 0b       	sbc	r30, r20
 aac:	f5 0b       	sbc	r31, r21

00000aae <__udivmodsi4_ep>:
 aae:	66 1f       	adc	r22, r22
 ab0:	77 1f       	adc	r23, r23
 ab2:	88 1f       	adc	r24, r24
 ab4:	99 1f       	adc	r25, r25
 ab6:	1a 94       	dec	r1
 ab8:	69 f7       	brne	.-38     	; 0xa94 <__udivmodsi4_loop>
 aba:	60 95       	com	r22
 abc:	70 95       	com	r23
 abe:	80 95       	com	r24
 ac0:	90 95       	com	r25
 ac2:	9b 01       	movw	r18, r22
 ac4:	ac 01       	movw	r20, r24
 ac6:	bd 01       	movw	r22, r26
 ac8:	cf 01       	movw	r24, r30
 aca:	08 95       	ret

00000acc <_exit>:
 acc:	f8 94       	cli

00000ace <__stop_program>:
 ace:	ff cf       	rjmp	.-2      	; 0xace <__stop_program>
