
AEOLUS_Sensorboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 000000c0  00000000  00000000  000008f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005c4  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ee  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000500  00000000  00000000  00001162  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000007c  00000000  00000000  00001664  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000168  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e6 e4       	ldi	r30, 0x46	; 70
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 30       	cpi	r26, 0x00	; 0
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	6c c0       	rjmp	.+216    	; 0x142 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
	/************************************************************************/
	/* BOOT                                                                 */
	/************************************************************************/
	
	//Init the input/output ports 
	port_init(); 
  6c:	40 d0       	rcall	.+128    	; 0xee <port_init>
	
	//Init the use of a Servo
	servo_init(); 
  6e:	4d d0       	rcall	.+154    	; 0x10a <servo_init>
    while(1)
    {
		
		//Hello World Application 
		port_led(true);
		OCR1A = ICR1 -550;
  70:	c6 e8       	ldi	r28, 0x86	; 134
  72:	d0 e0       	ldi	r29, 0x00	; 0
  74:	08 e8       	ldi	r16, 0x88	; 136
  76:	10 e0       	ldi	r17, 0x00	; 0
	/************************************************************************/
    while(1)
    {
		
		//Hello World Application 
		port_led(true);
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	40 d0       	rcall	.+128    	; 0xfe <port_led>
		OCR1A = ICR1 -550;
  7e:	88 81       	ld	r24, Y
  80:	99 81       	ldd	r25, Y+1	; 0x01
  82:	86 52       	subi	r24, 0x26	; 38
  84:	92 40       	sbci	r25, 0x02	; 2
  86:	d8 01       	movw	r26, r16
  88:	11 96       	adiw	r26, 0x01	; 1
  8a:	9c 93       	st	X, r25
  8c:	8e 93       	st	-X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	8f e3       	ldi	r24, 0x3F	; 63
  90:	9d e0       	ldi	r25, 0x0D	; 13
  92:	a3 e0       	ldi	r26, 0x03	; 3
  94:	81 50       	subi	r24, 0x01	; 1
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	a0 40       	sbci	r26, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x28>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
  a0:	8f e3       	ldi	r24, 0x3F	; 63
  a2:	9d e0       	ldi	r25, 0x0D	; 13
  a4:	a3 e0       	ldi	r26, 0x03	; 3
  a6:	81 50       	subi	r24, 0x01	; 1
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	a0 40       	sbci	r26, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x3a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
		_delay_ms(1000);
		_delay_ms(1000);
		port_led(false);
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	23 d0       	rcall	.+70     	; 0xfe <port_led>
		OCR1A = ICR1 - 2350; 
  b8:	88 81       	ld	r24, Y
  ba:	99 81       	ldd	r25, Y+1	; 0x01
  bc:	8e 52       	subi	r24, 0x2E	; 46
  be:	99 40       	sbci	r25, 0x09	; 9
  c0:	d8 01       	movw	r26, r16
  c2:	11 96       	adiw	r26, 0x01	; 1
  c4:	9c 93       	st	X, r25
  c6:	8e 93       	st	-X, r24
  c8:	8f e3       	ldi	r24, 0x3F	; 63
  ca:	9d e0       	ldi	r25, 0x0D	; 13
  cc:	a3 e0       	ldi	r26, 0x03	; 3
  ce:	81 50       	subi	r24, 0x01	; 1
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	a0 40       	sbci	r26, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x62>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x6c>
  d8:	00 00       	nop
  da:	8f e3       	ldi	r24, 0x3F	; 63
  dc:	9d e0       	ldi	r25, 0x0D	; 13
  de:	a3 e0       	ldi	r26, 0x03	; 3
  e0:	81 50       	subi	r24, 0x01	; 1
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	a0 40       	sbci	r26, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x74>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x7e>
  ea:	00 00       	nop
  ec:	c5 cf       	rjmp	.-118    	; 0x78 <main+0xc>

000000ee <port_init>:
 *
 */
void port_init(void) {
	
	//Set data direction (Output/Input) 
	DDRB = 0xff;	//All ports are outputs
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;    //All ports are outputs
  f2:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xff;    //All ports are outputs 
  f4:	8a b9       	out	0x0a, r24	; 10
	
	//Set all Ports to logic zero (<=> OFF) 
	PORTB = 0x00; 
  f6:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00; 
  f8:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00; 
  fa:	1b b8       	out	0x0b, r1	; 11
	
	
} 
  fc:	08 95       	ret

000000fe <port_led>:
 * Control the LED connected to PORT PB0
 *
 * @param state, true, iff the LED must be turned on, false else  
 */
void port_led(bool state) {
	if(state) {
  fe:	88 23       	and	r24, r24
 100:	11 f0       	breq	.+4      	; 0x106 <port_led+0x8>
		PORTB |= (1<<PB0); 
 102:	28 9a       	sbi	0x05, 0	; 5
 104:	08 95       	ret
	} else {
		PORTB &= ~(1<<PB0); 
 106:	28 98       	cbi	0x05, 0	; 5
 108:	08 95       	ret

0000010a <servo_init>:
	ICR1  = 20000;
	TCCR1A = (1<<COM1A1);
	TCCR1A = (1<<COM1A0);*/
	
	
	DDRD |= 0xFF;
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	8a b9       	out	0x0a, r24	; 10
	//TCCR1A |= 1<<WGM11 | 1<<COM1A1 | 1<<COM1A0;
	TCCR1A |= (1<<WGM11) | (1<<COM1A1); 
 110:	e0 e8       	ldi	r30, 0x80	; 128
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	82 68       	ori	r24, 0x82	; 130
 118:	80 83       	st	Z, r24
	TCCR1B |= 1<<WGM13 | 1<<WGM12 | 1<<CS10;
 11a:	e1 e8       	ldi	r30, 0x81	; 129
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	89 61       	ori	r24, 0x19	; 25
 122:	80 83       	st	Z, r24
	
	//Set maximum Timer-Count 
	// ICR1 = F_CPU/(Servo acceptable Value in Hz); 
	
	ICR1 = 15999; 
 124:	e6 e8       	ldi	r30, 0x86	; 134
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	8f e7       	ldi	r24, 0x7F	; 127
 12a:	9e e3       	ldi	r25, 0x3E	; 62
 12c:	91 83       	std	Z+1, r25	; 0x01
 12e:	80 83       	st	Z, r24
	//ICR1 = 19999;

	OCR1A = ICR1 - 2000; //18000
 130:	80 81       	ld	r24, Z
 132:	91 81       	ldd	r25, Z+1	; 0x01
 134:	80 5d       	subi	r24, 0xD0	; 208
 136:	97 40       	sbci	r25, 0x07	; 7
 138:	90 93 89 00 	sts	0x0089, r25
 13c:	80 93 88 00 	sts	0x0088, r24
	
	
	
 140:	08 95       	ret

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
